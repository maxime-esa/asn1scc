group c_uper;

rtlModuleName() ::= ""

call_base_type_func_encode(p, sFuncName) ::= <<
<sFuncName>(<p>, codec, false) match // uper:6
    case Right(_) =>
    case Left(err) => return Left(err)
>>
call_base_type_func_decode(p, sFuncName) ::= <<
val <p> = <sFuncName>(codec) match // uper:13
    case RightMut(decData) => decData
    case LeftMut(err) => return LeftMut(err)
>>

/*******************************************************/
/*   U P E R                                           */
/*******************************************************/

EmitTypeAssignment_def_err_code(sErrCode, nErrValue) ::= <<
@inline @cCode.inline val <sErrCode>: ErrorCode = <nErrValue>  /**/
>>

EmitTypeAssignment_def_encode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER, soSparkAnnotations, bReqBytesForEncodingIsZero) ::= <<
<arrsErrcodes:{x|<x>}; separator="\n">
@inline @cCode.inline val <sTypeDefName>_REQUIRED_BYTES_FOR_ENCODING = <nMaxBytesInPER>
@inline @cCode.inline val <sTypeDefName>_REQUIRED_BITS_FOR_ENCODING = <nMaxBitsInPER>
>>

EmitTypeAssignment_encode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitialExp, bReqBytesForEncodingIsZero, bBsIsUnreferenced, bVarNameIsUnreferenced, soInitFuncName, arrsAnnots, arrsPrecond, soPostcond) ::= <<
@opaque @inlineOnce <arrsAnnots:{ann|@<ann>}; separator=" ">
def <sFuncName>(<if(bVarNameIsUnreferenced)>@annotation.unused <endif><sVarName>: <sTypeDefName>, <if(bBsIsUnreferenced)>@annotation.unused <endif>codec: UPER, bCheckConstraints: Boolean): Either[ErrorCode, Int] = //uper:35
{
    <arrsPrecond:{pre|require(<pre>)}; separator="\n">
    <arrsLocalVariables:{lv|<lv>}; separator="\n">
    <if(soIValidFuncName)>
    if bCheckConstraints then
        <soIValidFuncName>(<sVarName>) match
            case Left(l) => return Left(l)
            case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    <sContent>
    <else>
    <sContent>
    <endif>
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    <soPostcond>
}
>>

EmitTypeAssignment_def_decode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER, soSparkAnnotations, bReqBytesForEncodingIsZero) ::= <<
<arrsErrcodes:{x|<x>}; separator="\n">
>>

EmitTypeAssignment_decode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitialExp, bReqBytesForEncodingIsZero, bBsIsUnreferenced, bVarNameIsUnreferenced, soInitFuncName, arrsAnnots, arrsPrecond, soPostcond) ::= <<
@opaque @inlineOnce <arrsAnnots:{ann|@<ann>}; separator=" ">
def <sFuncName>(<if(bBsIsUnreferenced)>@annotation.unused <endif>codec: UPER): EitherMut[ErrorCode, <sTypeDefName>] = // uper:58
{
    <arrsPrecond:{pre|require(<pre>)}; separator="\n">
    <arrsLocalVariables:{lv|<lv>}; separator="\n">

    @ghost val oldCdc = snapshot(codec)
    <sContent>

    <if(soIValidFuncName)>
    <soIValidFuncName>(pVal) match // uper:68
        case Left(l) => LeftMut[ErrorCode, <sTypeDefName>](l)
        case Right(_) => RightMut[ErrorCode, <sTypeDefName>](pVal)
    <else>
    RightMut[ErrorCode, <sTypeDefName>](pVal)
    <endif>
}.ensuring { (res : EitherMut[ErrorCode, <sTypeDefName>]) =>
    <soPostcond>
}

@ghost @pure <arrsAnnots:{ann|@<ann>}; separator=" ">
def <sFuncName>_pure(codec: UPER): (UPER, EitherMut[ErrorCode, <sTypeDefName>]) =
{
    <arrsPrecond:{pre|require(<pre>)}; separator="\n">
    val cpy = snapshot(codec)
    val res = <sFuncName>(cpy)
    (cpy, res)
}

>>

InternalItem_oct_str_encode(p, sAcc, i, sErrCode) ::=<<
if !codec.base.bitStream.appendByte(<p><sAcc>arr(<i>)) then
    Console.err.println("appendByte failed: not enough space for 1 byte")

>>

InternalItem_oct_str_decode(p, sAcc, i, sErrCode) ::=<<
if !codec.readByte(<p><sAcc>arr(<i>)) then
    return LeftMut(<sErrCode>)
>>

PrintAlphabet2(arrnCharSet) /*nogen*/::= <<
val allowedCharSet: Array[Byte] = Array(<arrnCharSet:{ch|0x<ch;format="X2">}; wrap, anchor, separator=",">)
>>

InternalItem_string_with_alpha_encode(p, sErrCode, td/*:FE_StringTypeDefinition*/, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>
val charIndex: Int = GetCharIndex(<p>(<i>), UByte.fromArrayRaws(allowedCharSet))
codec.base.encodeConstrainedWholeNumber(charIndex, 0, <nLastItemIndex>)
>>

InternalItem_string_with_alpha_decode(p, sErrCode,  td/*:FE_StringTypeDefinition*/, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
<PrintAlphabet2(arrnAlphabetAsciiCodes)>

val <p>_arr_<i>_ = allowedCharSet(codec.base.decodeConstrainedWholeNumber(0, <nLastItemIndex>).toInt).toRawUByte
>>

InternalItem_string_no_alpha_encode(p, sErrCode, i) ::=<<
codec.base.encodeConstrainedWholeNumber(<p>(<i>).toRaw, 0, 127)
>>

InternalItem_string_no_alpha_decode(p, sErrCode, i) ::=<<
val <p>_arr_<i>_ = UByte.fromRaw(codec.base.decodeConstrainedWholeNumberByte(0, 127)) // uper:109
>>

/* INTEGER START*/

/*case: A:: = INTEGER (-5..20) */
IntFullyConstraint_encode(p, nMin, nMax, nBits, sSsuffix, sErrCode) ::= <<
codec.base.encodeConstrainedWholeNumber(<p>, <nMin>, <nMax>)
>>

IntFullyConstraint_decode(p, nMin, nMax, nBits, sSsuffix, sErrCode) ::= <<
val <p> = codec.base.decodeConstrainedWholeNumber<sSsuffix>(<nMin>, <nMax>) // uper:122
>>

/*case: Positive fully constraint A:: = INTEGER (5..20) */
IntFullyConstraintPos_encode(p, nMin, nMax, nBits, sSsuffix, sErrCode, soRangeAssert) ::= <<
locally {
    ghostExpr {
        @opaque @inlineOnce
        def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(<nMax>) - ULong.fromRaw(<nMin>)) == <nBits>)
        bitCountLemma()
    }
}
<soRangeAssert>
codec.base.encodeConstrainedPosWholeNumber(<p>, <nMin>.toRawULong, <nMax>.toRawULong)
>>

IntFullyConstraintPos_decode(p, nMin, nMax, nBits, sSsuffix, sErrCode, soRangeAssert) ::= <<
locally {
    ghostExpr {
        @opaque @inlineOnce
        def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(<nMax>) - ULong.fromRaw(<nMin>)) == <nBits>)
        bitCountLemma()
    }
}
val <p> = codec.base.decodeConstrainedPosWholeNumber<sSsuffix>(ULong.fromRaw(<nMin>), ULong.fromRaw(<nMax>)) // uper:135
>>

/*case: A :: = INTEGER */
IntUnconstrained_encode(p, sErrCode, bCoverageIgnore) ::= "codec.base.encodeUnconstrainedWholeNumber(<p>)"
IntUnconstrained_decode(p, sErrCode, bCoverageIgnore) ::= <<
val <p> = codec.base.decodeUnconstrainedWholeNumber() match {
    case None() => return LeftMut(<sErrCode>)
    case Some(v) => v
}
>>

/*case: A :: = INTEGER(MIN..5) */
IntUnconstrainedMax_encode(p, nMax, soCheckExp, sErrCode) ::= "codec.base.encodeUnconstrainedWholeNumber(<p>)"
IntUnconstrainedMax_decode(p, nMax, soCheckExp, sErrCode) ::= <<
if !codec.base.decodeUnconstrainedWholeNumber() then // TODO meth does not return a boolean value...?
    <if(soCheckExp)>
    if !<soCheckExp> then return LeftMut(<sErrCode>)
    <else>
    return LeftMut(<sErrCode>)
    <endif>
>>

/*case: A:: = INTEGER (-5..MAX) */
IntSemiConstraint_encode(p, nMin, sErrCode) ::= "codec.base.encodeSemiConstrainedWholeNumber(<p>, <nMin>)"
IntSemiConstraint_decode(p, nMin, sErrCode) ::= <<
if !codec.base.decodeSemiConstrainedWholeNumber(<nMin>) then
    return LeftMut(<sErrCode>)
>>

/*case: A:: = INTEGER (5..MAX) */
IntSemiConstraintPos_encode(p, nMin, sErrCode) ::= "codec.base.encodeSemiConstrainedPosWholeNumber(<p>, <nMin>)"
IntSemiConstraintPos_decode(p, nMin, sErrCode) ::= <<
if !codec.base.decodeSemiConstrainedPosWholeNumber(<nMin>) then
    return LeftMut(<sErrCode>)
>>

/*case: A:: = INTEGER (5..5) */
IntNoneRequired_encode(p, sConst, sErrCode) ::=<<
/* No need to encode the val <p>, it will always be <sConst> */
; // NOP
>>
IntNoneRequired_decode(p, sConst, sErrCode) ::= <<
val <p> = <sConst>
>>

/*case: A:: = INTEGER (5..40,...) */
IntRootExt_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
codec.base.appendBitZero() /* write extension bit*/
<sIntBody>
>>

IntRootExt_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
{
    extBit: Ref[Boolean] = Ref(false)

    /* read extension bit*/
    val success = codec.base.bitStream.readBit(extBit)
    if success then
        if extBit == false then /* ext bit is zero ==> value is expected with root range*/
            <sIntBody>
        else
            <IntUnconstrained_decode(p=p, sErrCode = sErrCode, bCoverageIgnore="true")>
    else
        ret = <sErrCode>
}
>>

/*case: A:: = INTEGER (5..40,..., 60..70) */
IntRootExt2_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
if <sRootBaseConstraint> then
    codec.base.appendBitZero() /* write extension bit, value within root range, so ext bit is zero */
    <sIntBody>
else
    /* value is not within root range, so ext bit is one and value is encoded as unconstrained */
    codec.base.appendBitOne()
    <IntUnconstrained_encode(p=p, sErrCode=sErrCode)>
>>

IntRootExt2_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::="<IntRootExt_decode(p=p, nMin=nMin, sRootBaseConstraint = sRootBaseConstraint, sIntBody = sIntBody, sErrCode=sErrCode)>"


/* INTEGER END*/

Boolean_encode(p, sErrCode) ::= <<
codec.base.bitStream.appendBit(<p>)
>>

Boolean_decode(p, sErrCode) ::= <<
val <p> = codec.base.bitStream.readBit() // uper:225
>>

Real_encode(p, sSuffix, sErrCode) ::= "codec.base.encodeReal(<p>)"
Real_decode(p, sSuffix, sErrCode) ::= <<
val <p> = codec.base.decodeReal<sSuffix>().toDouble // uper:234
>>

ObjectIdentifier_encode(p, sErrCode) ::= "codec.ObjectIdentifier_encode(<p>);"
ObjectIdentifier_decode(p, sErrCode) ::= <<
if !codec.ObjectIdentifier_decode() then // uper:234 TODO
    return LeftMut(<sErrCode>)
>>

RelativeOID_encode(p, sErrCode) ::= "codec.RelativeOID_encode(<p>);"
RelativeOID_decode(p, sErrCode) ::= <<
if !codec.RelativeOID_decode() then
    return LeftMut(<sErrCode>)
>>

Time_encode(p, sTimeSubType, sErrCode) ::= "codec.<sTimeSubType>_encode(<p>);"
Time_decode(p, sTimeSubType, sErrCode) ::= <<
if !codec.<sTimeSubType>_decode() then
    return LeftMut(<sErrCode>)
>>

Enumerated_item_encode(p, sName, nIndex, nLastItemIndex) ::= <<
case <sName> =>
    codec.base.encodeConstrainedWholeNumber(<nIndex>, 0, <nLastItemIndex>)
>>
Enumerated_item_decode(p, sName, nIndex, nLastItemIndex) ::= <<
case <nIndex> => <sName>
>>

Enumerated_encode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
<p> match // uper:270
    <arrsItem; separator="\n">
>>

Enumerated_decode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
val <p> = codec.base.decodeConstrainedWholeNumber(0, <nLastItemIndex>) match // uper:277
    <arrsItem; separator="\n">
    case _ =>
        return LeftMut(<sErrCode>)
>>

Enumerated_no_switch_encode(p, td/*:FE_EnumeratedTypeDefinition*/, sErrCode, sEnumIndex, nLastItemIndex, sFirstItemName) ::= <<
>>

Enumerated_no_switch_decode(p, td/*:FE_EnumeratedTypeDefinition*/, sErrCode, sEnumIndex, nLastItemIndex, sFirstItemName) ::= <<
>>


/* CHOICE START*/

choice_child_encode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr, bIsSequence, bIsEnum) ::= <<
case <sChildID>(<sChildName>) =>
    codec.base.encodeConstrainedWholeNumber(<nChildIndex>, 0, <nLastItemIndex>)
    <sChildContent>
>>

choice_child_decode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr, bIsSequence, bIsEnum) ::= <<
case <nChildIndex> =>
    <sChildContent>
    <sChildID>(<sChildName>)
>>

choice_encode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, td/*:FE_ChoiceTypeDefinition*/, nIndexSizeInBits, bIntroSnap) ::= <<
<if(bIntroSnap)>
@ghost val codec_0_1 = snapshot(codec)
<endif>

<p> match // uper:310
    <arrsChildren: {ch|<ch>}; separator="\n">
>>

choice_decode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, td/*:FE_ChoiceTypeDefinition*/, nIndexSizeInBits, bIntroSnap) ::= <<
<if(bIntroSnap)>
@ghost val codec_0_1 = snapshot(codec)
<endif>

val <p> = codec.base.decodeConstrainedWholeNumber(0, <nLastItemIndex>) match // uper:317
    <arrsChildren: {ch|<ch>}; separator="\n">
    case _ =>
        return LeftMut(<sErrCode>)
>>

/* CHOICE END*/

/* SEQUENCE START */
sequence_presence_bit_encode(p, sAcc, sChName, soExistVar, sErrCode) ::= <<
codec.base.bitStream.appendBit(<p><sAcc><sChName>.isDefined)
>>
sequence_presence_bit_decode(p, sAcc, sChName, soExistVar, sErrCode) ::= <<
val <soExistVar> = codec.base.bitStream.readBit()
>>

sequence_presence_bit_fix_encode(p, sAcc, sChName, soExistVar, sErrCode, sVal) ::= <<
codec.base.bitStream.appendBit(<sVal>)
>>

sequence_presence_bit_fix_decode(p, sAcc, sChName, soExistVar, sErrCode, sVal) ::= <<
<sequence_presence_bit_decode(p=p, sAcc=sAcc, sChName=sChName, soExistVar=soExistVar, sErrCode=sErrCode)>
>>

sequence_mandatory_child_encode(sChName, sChildContent) ::= <<
/*Encode <sChName> sequence_mandatory_child_encode */
<sChildContent>
>>

sequence_mandatory_child_decode(sChName, sChildContent) ::= <<
/* Decode <sChName> sequence_mandatory_child_decode  */
<sChildContent>

>>

sequence_optional_child_encode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef) ::= <<
/*Encode <sChName> */
<p><sAcc><sChName> match
    case SomeMut(<sChName>) =>
        <sChildContent>
    case NoneMut() =>
>>

sequence_optional_child_decode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef) ::= <<
/*Decode <sChName> */
val <p>_<sChName>: OptionMut[<sChildTypedef>] =
    if <soExistVar> then
        <sChildContent>
        SomeMut(<soChildExpr>)
    else NoneMut[<sChildTypedef>]()
>>


sequence_default_child_encode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef, sInitWithDefaultValue) ::= <<
<sequence_optional_child_encode(p=p, sAcc=sAcc, sChName=sChName, soExistVar=soExistVar, soChildExpr=soChildExpr, sChildTypedef=sChildTypedef, sChildContent=sChildContent)>
>>


sequence_default_child_decode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef, sInitWithDefaultValue) ::= <<
/*Decode <sChName> */
val <p>_<sChName> =
    if <soExistVar> then
        <sChildContent>
        SomeMut(<soChildExpr>)
    else
        <sInitWithDefaultValue>
>>

sequence_build(p, sTypeDefName, bIsOptional, arrsChildren) ::= <<
<if(!bIsOptional)>
val <p> = <sTypeDefName>(<arrsChildren; separator=", ">)
<else>
val <p>: OptionMut[<sTypeDefName>] = SomeMut(<sTypeDefName>(<arrsChildren; separator=", ">))
<endif>
>>


/* SEQUENCE END */

loopFixedItem (i, fixedSize,  sInternalItem)::= /*nogen*/<<
<i> = 0
(while(<i> \< <fixedSize>.toInt) {
    decreases(<fixedSize>.toInt - <i>)
    <sInternalItem>
    <i> += 1
}).invariant(0 \<= <i> && <i> \<= <fixedSize>.toInt)
>>


/* IA5String & Numeric String */

str_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize, soInitExpr, bIntroSnap, soCallAux) ::= <<
<if(bIntroSnap)>
@ghost val codec_0_1 = snapshot(codec)
<endif>

<soCallAux>
>>

str_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize, soInitExpr, bIntroSnap, soCallAux) ::= <<
<if(bIntroSnap)>
@ghost val codec_0_1 = snapshot(codec)
<endif>

<soCallAux>
>>


str_VarSize_encode(p, sPIden, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, soInitExpr, soCallAux) ::= <<
nStringLength = <p>.indexOfOrLength(0x00.toRawUByte)
/*ret = nStringLength >= <nSizeMin> && nStringLength \<= <nSizeMax>;*/
codec.base.encodeConstrainedWholeNumber(nStringLength, <nSizeMin>, <nSizeMax>)
val <sPIden>_nCount = nStringLength
<soCallAux>
>>

str_VarSize_decode(p, sPIden, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, soInitExpr, soCallAux) ::= <<
nStringLength = codec.base.decodeConstrainedWholeNumberInt(<nSizeMin>, <nSizeMax>)
val <p>_nCount = nStringLength
<soCallAux>
>>

/* SEQUENCE OF & OCTET STRING*/
seqOf_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sChildInitExpr, soCallAux) ::= <<
<soCallAux>
>>

seqOf_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sChildInitExpr, soCallAux) ::= <<
<soCallAux>
>>

seqOf_VarSize_encode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sChildInitExpr, sErrCode, nAbsOffset, nRemainingMinBits, nLevel, nIx, nOffset, bIntroSnap, soCallAux) ::= <<
<if(bIntroSnap)>
@ghost val codec_0_1 = snapshot(codec)
<endif>

locally {
    @ghost val oldCodec = snapshot(codec)
    codec.base.encodeConstrainedWholeNumber(<p><sAcc>nCount, <nSizeMin>, <nSizeMax>)
    ghostExpr {
        @opaque @inlineOnce
        def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(<nSizeMax>) - ULong.fromRaw(<nSizeMin>)) == <nSizeInBits>)
        bitCountLemma()
        assert(codec.base.bitStream.bitIndex \<= oldCodec.base.bitStream.bitIndex + <nSizeInBits>L)
        BitStream.validateOffsetBitsIneqLemma(oldCodec.base.bitStream, codec.base.bitStream, <nRemainingMinBits>, <nSizeInBits>L)
        //check(codec.base.bitStream.bitIndex \<= codec_0_1.base.bitStream.bitIndex + <nAbsOffset>L + <nSizeInBits>L)
        //check(codec.base.bitStream.bitIndex \<= codec_<nLevel>_<nIx>.base.bitStream.bitIndex + <nOffset>L + <nSizeInBits>L)
    }
}
<soCallAux>
>>

seqOf_VarSize_decode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sChildInitExpr, sErrCode, nAbsOffset, nRemainingMinBits, nLevel, nIx, nOffset, bIntroSnap, soCallAux) ::= <<
<if(bIntroSnap)>
@ghost val codec_0_1 = snapshot(codec)
<endif>

val <p>_nCount = locally {
    @ghost val oldCodec = snapshot(codec)
    val <p>_nCount = codec.base.decodeConstrainedWholeNumber(<nSizeMin>, <nSizeMax>).toInt
    ghostExpr {
        @opaque @inlineOnce
        def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(<nSizeMax>) - ULong.fromRaw(<nSizeMin>)) == <nSizeInBits>)
        bitCountLemma()
        assert(codec.base.bitStream.bitIndex \<= oldCodec.base.bitStream.bitIndex + <nSizeInBits>L)
        BitStream.validateOffsetBitsIneqLemma(oldCodec.base.bitStream, codec.base.bitStream, <nRemainingMinBits>, <nSizeInBits>L)
        //check(codec.base.bitStream.bitIndex \<= codec_0_1.base.bitStream.bitIndex + <nAbsOffset>L + <nSizeInBits>L)
        //check(codec.base.bitStream.bitIndex \<= codec_<nLevel>_<nIx>.base.bitStream.bitIndex + <nOffset>L + <nSizeInBits>L)
    }
    <p>_nCount
}
<soCallAux>
>>

octet_FixedSize_encode(sTypeDefName, p, sAcc, nFixedSize) ::= <<
codec.base.encodeOctetString_no_length_vec(<p><sAcc>arr, <nFixedSize>.toInt)
>>

octet_FixedSize_decode(sTypeDefName, p, sAcc, nFixedSize) ::= <<
val <p> = <sTypeDefName>(codec.base.decodeOctetString_no_length_vec(<nFixedSize>))
>>

octet_VarSize_encode(sTypeDefName, p, sAcc, nSizeMin, nSizeMax, nSizeInBits, sErrCode) ::= <<
codec.base.encodeConstrainedWholeNumber(<p><sAcc>nCount, <nSizeMin>, <nSizeMax>)
codec.base.encodeOctetString_no_length_vec(<p><sAcc>arr, <p><sAcc>nCount.toInt)
>>

octet_VarSize_decode(sTypeDefName, p, sAcc, nSizeMin, nSizeMax, nSizeInBits, sErrCode) ::= <<
// decode length
val <p>_nCount = codec.base.decodeConstrainedWholeNumber(<nSizeMin>, <nSizeMax>)
// decode payload
val <p>_arr = codec.base.decodeOctetString_no_length_vec(<p>_nCount.toInt)
val <p> = <sTypeDefName>(<p>_nCount, <p>_arr)
>>

/* BIT STRING*/
bitString_FixSize_encode(sTypeDefName, p, sAcc, nFixedSize, sErrCode) ::= <<
assert(<nFixedSize>.toInt >= 0) // overflow may happen during cast
codec.base.bitStream.appendBitsMSBFirstVec(<p><sAcc>arr, <nFixedSize>.toInt)

>>
bitString_FixSize_decode(sTypeDefName, p, sAcc, nFixedSize, sErrCode) ::= <<
val <p> = <sTypeDefName>(codec.base.bitStream.readBitsVec(<nFixedSize>.toInt))
>>

bitString_VarSize_encode(sTypeDefName, p, sAcc, nSizeMin, nSizeMax, sErrCode, nSizeInBits) ::= <<
codec.base.encodeConstrainedWholeNumber(<p><sAcc>nCount, <nSizeMin>, <nSizeMax>)
<bitString_FixSize_encode(sTypeDefName=sTypeDefName, p=p, sAcc=sAcc, nFixedSize=[p, sAcc,"nCount"], sErrCode=sErrCode)>
>>

bitString_VarSize_decode(sTypeDefName, p, sAcc, nSizeMin, nSizeMax, sErrCode, nSizeInBits) ::= <<
val <p>_nCount = codec.base.decodeConstrainedWholeNumber(<nSizeMin>, <nSizeMax>)
val <p>_arr = codec.base.bitStream.readBitsVec(<p>_nCount.toInt)
val <p> = <sTypeDefName>(<p>_nCount, <p>_arr)
>>


FixedSize_Fragmentation_sqf_64K_encode(p, sAcc,sCurOffset, sCurBlockSize, sBlockIndex, nBlocks64K, sInternalItem, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
//encode <nBlocks64K> x 64K Blocks
<sCurBlockSize> = 0x10000;
<sCurOffset> = 0;
var <sBlockIndex> = 0
while(<sBlockIndex> \< <nBlocks64K>)
{
    codec.base.encodeConstrainedWholeNumber(0xC4, 0, 0xFF)
    <if(bIsBitStringType)>
    codec.base.bitStream.appendBitsMSBFirst(&<p><sAcc>arr[<sCurOffset>/8], <sCurBlockSize>.toInt)

    <else>
    val <sBLI>=(int)<sCurOffset>
    while(<sBLI> \< (int)(<sCurBlockSize> + <sCurOffset>))
    {
        <sInternalItem>
        <sBLI> += 1
    }
    <endif>
    <sCurOffset> += <sCurBlockSize>
    <sBlockIndex> += 1
}
>>

FixedSize_Fragmentation_sqf_small_block_encode(p, sAcc,sInternalItem, nBlockSize, sBlockId, sCurOffset, sCurBlockSize, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
//encode <nBlockSize> Block
<sCurBlockSize> = <nBlockSize>;
codec.base.encodeConstrainedWholeNumber(<sBlockId>, 0, 0xFF)
<if(bIsBitStringType)>
codec.base.bitStream.appendBitsMSBFirst(&<p><sAcc>arr[<sCurOffset>/8], <sCurBlockSize>.toInt)
<else>
for(<sBLI>=(int)<sCurOffset>; <sBLI> \< (int)(<sCurBlockSize> + <sCurOffset>); <sBLI>++)
{
    <sInternalItem>
}

<endif>
<sCurOffset> += <sCurBlockSize>;
>>

FixedSize_Fragmentation_sqf_remaining_encode(p, sAcc,sInternalItem, bRemainingItemsWithinByte, nRemainingItemsVar, sCurOffset, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::= <<
//encode remaining <nRemainingItemsVar> items
<if(bRemainingItemsWithinByte)>
codec.base.encodeConstrainedWholeNumber(<nRemainingItemsVar>, 0, 0xFF)
<else>
codec.base.appendBitOne()
codec.base.encodeConstrainedWholeNumber(<nRemainingItemsVar>, 0, 0x7FFF)
<endif>
<if(bIsBitStringType)>
codec.base.bitStream.appendBitsMSBFirst(<p><sAcc>arr[<sCurOffset>/8], <nRemainingItemsVar>.toInt)
<else>
for(<sBLI>=(int)<sCurOffset>; <sBLI> \< (int)(<sCurOffset> + <nRemainingItemsVar>); <sBLI>++)
{
    <sInternalItem>
}

<endif>
>>

FixedSize_Fragmentation_sqf_encode(p, sAcc, arrsEncodingParts, nFixedSize, bIsBitStringType) ::= <<
<arrsEncodingParts; separator="\n">
>>

Fragmentation_sqf_encode(p, sAcc, sInternalItem, nIntItemMaxSize, nSizeMin, nSizeMax, nRequiredBitsForUPerEncoding, bIsVariableSize, sErrCodeName, sRemainingItemsVar, sCurBlockSize, sBlockIndex, sCurOffset, sBLJ, sBLI, sLengthTmp, bIsBitStringType, bIsAsciiString) ::= <<
<sRemainingItemsVar> = <if(bIsAsciiString)>(asn1SccSint)strlen(<p>)<else><if(bIsVariableSize)><p><sAcc>nCount<else><nSizeMax><endif><endif>
<sCurBlockSize> = 0
<sCurOffset> = 0
<sBlockIndex> = 0
while (<sRemainingItemsVar> >= 0x4000 && <sBlockIndex> \< <if(bIsAsciiString)>(asn1SccSint)strlen(<p>)<else><if(bIsVariableSize)><p><sAcc>nCount<else><nSizeMax><endif><endif>)
{
    if <sRemainingItemsVar> >= 0x10000 then
        <sCurBlockSize> = 0x10000
        codec.base.encodeConstrainedWholeNumber(0xC4, 0, 0xFF)
    else if <sRemainingItemsVar> >= 0xC000 then
        <sCurBlockSize> = 0xC000
        codec.base.encodeConstrainedWholeNumber(0xC3, 0, 0xFF)
    else if <sRemainingItemsVar> >= 0x8000 then
        <sCurBlockSize> = 0x8000
        codec.base.encodeConstrainedWholeNumber(0xC2, 0, 0xFF)
    else
        <sCurBlockSize> = 0x4000
        codec.base.encodeConstrainedWholeNumber(0xC1, 0, 0xFF)

    <if(bIsBitStringType)>
    codec.base.bitStream.appendBitsMSBFirst(<p><sAcc>arr[<sCurOffset>/8], <sCurBlockSize>.toInt)
    <else>
    <sBLI>=<sCurOffset>.toInt
    while(<sBLI> \< (<sCurBlockSize> + <sCurOffset>).toInt)
    {
        <sInternalItem>
        <sBLI> += 1
    }
    <endif>
    <sCurOffset> += <sCurBlockSize>
    <sRemainingItemsVar> -= <sCurBlockSize>
    <sBlockIndex> = <sBlockIndex> + 1
}

if <sRemainingItemsVar> \<= 0x7F then
    codec.base.encodeConstrainedWholeNumber(<sRemainingItemsVar>, 0, 0xFF)
else
    codec.base.appendBitOne()
    codec.base.encodeConstrainedWholeNumber(<sRemainingItemsVar>, 0, 0x7FFF)

<if(bIsBitStringType)>
codec.base.bitStream.appendBitsMSBFirst(<p><sAcc>arr[<sCurOffset>/8], <sRemainingItemsVar>.toInt)
<else>
<sBLI> = <sCurOffset>.toInt
while(<sBLI> \< (<sCurOffset> + <sRemainingItemsVar>).toInt)
{
    <sInternalItem>
    <sBLI> += 1
}
<endif>
>>


FixedSize_Fragmentation_sqf_64K_decode(p, sAcc,sCurOffset, sCurBlockSize, sBlockIndex, nBlocks64K, sInternalItem, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
//we expect to decode <nBlocks64K> Blocks and each block must contain 64K elements. Each block must begin with the byte 0xC4
<sCurBlockSize> = 0x10000;
<sCurOffset> = 0;
*pErrCode = <sErrCodeName>;
for(<sBlockIndex> = 0; ret && <sBlockIndex> \< <nBlocks64K>; <sBlockIndex>++) {
    ret = codec.base.decodeConstrainedWholeNumber(<sRemainingItemsVar>, 0, 0xFF)
    val check = (ret == 0) && (<sRemainingItemsVar> == 0xC4);
    ret = if (check) then RightMut(0) else LeftMut(<sErrCodeName>)
    if ret == 0 then
        <if(bIsBitStringType)>
        ret = codec.base.bitStream.readBits(&<p><sAcc>arr[<sCurOffset>/8], <sCurBlockSize>).toInt
        ret = if (ret == 0) 0 else <sErrCodeName>;

        <else>
        <sBLI> = <sCurOffset>.toInt
        while(<sBLI> \< (<sCurBlockSize> + <sCurOffset>).toInt)
        {
            <sInternalItem>
            <sBLI> += 1
        }

        <endif>
        <sCurOffset> += <sCurBlockSize>;
    }
}
>>


FixedSize_Fragmentation_sqf_small_block_decode(p, sAcc,sInternalItem, nBlockSize, sBlockId, sCurOffset, sCurBlockSize, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
//decode a single Block with <nBlockSize> items
<sCurBlockSize> = <nBlockSize>;
ret = codec.base.decodeConstrainedWholeNumber(<sRemainingItemsVar>, 0, 0xFF)
val check = (ret == 0) && (<sRemainingItemsVar> == <sBlockId>);
ret = if (check) then RightMut(0) else LeftMut(<sErrCodeName>)
if ret.isRight then
<if(bIsBitStringType)>
    ret = codec.base.bitStream.readBits(&<p><sAcc>arr[<sCurOffset>/8], <sCurBlockSize>.toInt); // TODO call wrong
    ret = if (ret == 0) then RightMut(0) else LeftMut(<sErrCodeName>)

<else>
    <sBLI> = <sCurOffset>.toInt
    while(<sBLI> \< (<sCurBlockSize> + <sCurOffset>).toInt)
    {
        <sInternalItem>
        <sBLI> += 1
    }
<endif>
    <sCurOffset> += <sCurBlockSize>
>>

FixedSize_Fragmentation_sqf_remaining_decode(p, sAcc,sInternalItem, bRemainingItemsWithinByte, nRemainingItemsVar, sCurOffset, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::= <<
//decode remaining <nRemainingItemsVar> items
<if(bRemainingItemsWithinByte)>
ret = codec.base.decodeConstrainedWholeNumber(<sRemainingItemsVar>, 0, 0xFF)
ret  = ret && (<sRemainingItemsVar> == <nRemainingItemsVar>);

<else>
ret = codec.base.decodeConstrainedWholeNumber(<sRemainingItemsVar>, 0, 0xFFFF)
ret = ret && ((0x8000 & <sRemainingItemsVar>) > 0) && ( (0x7FFF & <sRemainingItemsVar>) == <nRemainingItemsVar>);

<endif>
if ret == 0 then
    <if(bIsBitStringType)>
    ret = codec.base.bitStream.readBits(&<p><sAcc>arr[<sCurOffset>/8], <nRemainingItemsVar>.toInt); // TODO call wrong
    ret = if (ret.isRight) then RightMut(0) else LeftMut(<sErrCodeName>)

    <else>
    <sBLI> = <sCurOffset>.toInt
    while(<sBLI> \< (<sCurOffset> + <nRemainingItemsVar>).toInt)
    {
        <sInternalItem>
        <sBLI> += 1
    }

    <endif>
>>

FixedSize_Fragmentation_sqf_decode(p, sAcc, arrsEncodingParts, nFixedSize, bIsBitStringType) ::= <<
<arrsEncodingParts; separator="\n">
<if(bIsBitStringType)>
<p>[<nFixedSize>] = 0x0
<endif>
>>


Fragmentation_sqf_decode(p, sAcc, sInternalItem, nIntItemMaxSize, nSizeMin, nSizeMax, nRequiredBitsForUPerEncoding, bIsVariableSize, sErrCodeName, sRemainingItemsVar, sCurBlockSize, sBlockIndex, sCurOffset, sBLJ, sBLI, sLengthTmp, bIsBitStringType, bIsAsciiString) ::= <<
<sRemainingItemsVar> = 0
<sCurBlockSize> = 0
<sCurOffset> = 0
<if(bIsVariableSize)>
<sLengthTmp> = 0
<endif>

<sRemainingItemsVar> = codec.base.decodeConstrainedWholeNumber(0, 0xFF).toInt // uper:733

while((<sRemainingItemsVar> & 0xC0) == 0xC0) {
    if <sRemainingItemsVar> == 0xC4 then
        <sCurBlockSize> = 0x10000
    else if <sRemainingItemsVar> == 0xC3 then
        <sCurBlockSize> = 0xC000
    else if <sRemainingItemsVar> == 0xC2 then
        <sCurBlockSize> = 0x8000
    else if <sRemainingItemsVar> == 0xC1 then
        <sCurBlockSize> = 0x4000
    else
        return LeftMut(<sErrCodeName>)

    if <sCurOffset> + <sCurBlockSize> > <nSizeMax> then
        return LeftMut(<sErrCodeName>)

    <if(bIsBitStringType)>
    if !codec.base.bitStream.readBits(&<p><sAcc>arr[<sCurOffset>/8], <sCurBlockSize>) then
       return <sErrCodeName>
    <else>
    <sBLI> = <sCurOffset>
    while(<sBLI> \< (<sCurOffset> + <sCurBlockSize>))
    {
        <sInternalItem>
        <sBLI> += 1
    }
    <endif>

    <if(bIsVariableSize)>
    <sLengthTmp> += <sCurBlockSize>
    <endif>
    <sCurOffset> += <sCurBlockSize>
    <sRemainingItemsVar> = codec.base.decodeConstrainedWholeNumber(0, 0xFF).toInt // uper:770
}

if ((<sRemainingItemsVar> & 0x80) > 0) then
    var len2 = 0;
    <sRemainingItemsVar> \<\<= 8
    len2 = codec.base.decodeConstrainedWholeNumber(0, 0xFF).toInt // uper:780

    <sRemainingItemsVar> |= len2;
    <sRemainingItemsVar> &= 0x7FFF;

if (<sCurOffset> + <sRemainingItemsVar> \<= <nSizeMax>) then
    return LeftMut(<sErrCodeName>)

<if(bIsBitStringType)>
if(!codec.base.bitStream.readBits(&<p><sAcc>arr[<sCurOffset>/8], <sRemainingItemsVar>.toInt)) // TODO remove address of operator
    return <sErrCodeName>

<else>
<sBLI> = <sCurOffset>
while(<sBLI> \< (<sCurOffset> + <sRemainingItemsVar>)) {
    <sInternalItem>
    <sBLI> += 1
}
<endif>

<if(bIsVariableSize)>
<sLengthTmp> += <sRemainingItemsVar>
<endif>

<if(bIsVariableSize)>
if ((<sLengthTmp> >= <nSizeMin>) && (<sLengthTmp> \<= <nSizeMax>)) then
    <if(!bIsAsciiString)>
    <p><sAcc>nCount = <sLengthTmp>
    <else>
    <p>[<sLengthTmp>] = 0x0
    <endif>
else
    return LeftMut(<sErrCodeName>)

<else>

<if(bIsAsciiString)>
<p>[<nSizeMax>] = 0x0
<endif>

<endif>
>>

octet_string_containing_func_encode(p, sFuncName, sReqBytesForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
/*open new scope to declare some variables*/
{
    /*encode to a temporary bitstream*/
    static byte arr[<sReqBytesForUperEncoding>];
    BitStream bitStrm;
    BitStream_Init(&bitStrm, arr, sizeof(arr));

    ret = <sFuncName>(<p>, &bitStrm, false) // TODO call wrong
    if (ret) then {
        int nCount = bitStrm.currentBit == 0 ? bitStrm.currentByte : (bitStrm.currentByte + 1);
        ret = pBitStrm.encodeOctetString(arr, nCount, <nMinSize>, <nMaxSize>);
    }
}
>>

octet_string_containing_func_decode(p, sFuncName, sReqBytesForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
/*open new scope to declare some variables*/
{
    /*decode to a temporary bitstream*/
    static byte arr[<sReqBytesForUperEncoding>];
    BitStream bitStrm;
    BitStream_Init(&bitStrm, arr, sizeof(arr));
    int nCount;
    ret = pBitStrm.decodeOctetString(arr, &nCount, <nMinSize>, <nMaxSize>);
    if (ret) then{
        ret = <sFuncName>(<p>, &bitStrm);
    }
}
>>

bit_string_containing_func_encode(p, sFuncName, sReqBytesForUperEncoding, sReqBitsForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
/*open new scope to declare some variables*/
{
    /*encode to a temporary bitstream*/
    static byte arr[<sReqBytesForUperEncoding>];
    BitStream bitStrm;
    BitStream_Init(&bitStrm, arr, sizeof(arr));

    ret = <sFuncName>(<p>, &bitStrm, false)
    if (ret) then {
        int nCount = bitStrm.currentByte*8 + bitStrm.currentBit;
        ret = pBitStrm.encodeBitString(arr, nCount, <nMinSize>, <nMaxSize>);
    }
}
>>

bit_string_containing_func_decode(p, sFuncName, sReqBytesForUperEncoding, sReqBitsForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
/*open new scope to declare some variables*/
{
    /*decode to a temporary bitstream*/
    static byte arr[<sReqBytesForUperEncoding>];
    BitStream bitStrm;
    BitStream_Init(&bitStrm, arr, sizeof(arr));
    int nCount;
    ret = pBitStrm.decodeBitString(arr, &nCount, <nMinSize>, <nMaxSize>);
    if (ret) then {
        ret = <sFuncName>(<p>, &bitStrm)
    }
}
>>


sparkAnnotations_encode(sTypeDefName) ::= <<
>>

sparkAnnotations_decode(sTypeDefName) ::= <<
>>

Null_declare(p) ::= "val <p>: NullType = 0"

decode_nullType(p) ::= <<
/*no encoding/decoding is required*/
>>

decode_empty_sequence_emptySeq(p) ::= <<
/*no encoding/decoding is required*/
>>

JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if (ret) then {
    <soNestedPart>
}

<endif>
>>

update_array_item(p, sI, sExpr) ::= <<
<p>.arr(<sI>) = freshCopy(<sExpr>) // TODO: FIXME: To get around aliasing restriction, ideally we should do things differently
>>

InternalItem_bit_str_encode(p, i, sErrCode) ::=<<
>>

InternalItem_bit_str_decode(p, i, sErrCode) ::=<<
>>
