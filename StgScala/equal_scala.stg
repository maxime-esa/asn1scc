group c_equal;


JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if ret then
    <soNestedPart>
<endif>
>>

JoinItems2_ret(sPart, sNestedPart) ::= <<
<sPart>
if (ret) {
    <sNestedPart>
}
>>

JoinItems2_ret_result(sPart, sNestedPart) ::= <<
<sPart>
if (ret) {
    <sNestedPart>
}
>>



/*
*****************************************************************************************
 E Q U A L      F U N C T I O N S
*****************************************************************************************
*/
PrintEqualDefinitionPrimitive(sFuncName, sTypeDefName) ::= <<
>>

PrintEqualDefinitionComposite(sFuncName, sTypeDefName) ::= <<
>>

PrintEqualPrimitive(sFuncName, sTypeDefName, sContent) ::= <<
def <sFuncName>(val1: <sTypeDefName>, val2: <sTypeDefName>): Boolean =
{
    return <sContent>
}
>>



PrintEqualComposite(sFuncName, sTypeDefName, sContent, arrsLocalVars) ::= <<
def <sFuncName>(pVal1: <sTypeDefName>, pVal2: <sTypeDefName>): Boolean =
{
    var ret: Boolean = true
    <arrsLocalVars; separator="\n">

    <sContent>
    return ret
}
>>

equalTypeAssignment_def(sVarName1, sVarName2, sStar, sFuncName, sTypeDefName) ::= << >>

equalTypeAssignment(sVarName1, sVarName2, sStar, sFuncName, sTypeDefName, sContent, arrsLocalVars, bExpression, bUnreferenced) ::= <<
def <sFuncName>(<sVarName1>: <sTypeDefName>, <sVarName2>: <sTypeDefName>): Boolean =
{
    <if(bExpression)>
    return <sContent>

    <else>
    var ret: Boolean = true
    <arrsLocalVars; separator="\n">

    <sContent>
    return ret

    <endif>
}
>>


isEqual_Primitive(p1, p2) ::= "<p1> == <p2>"

isEqual_String(p1, p2) ::= <<
locally {
    val zero = <p1>.indexOfOrLength(UByte.fromRaw(0))
    <p1>.toScala.slice(0, zero).sameElements(<p2>.toScala.slice(0, zero))
}
>>


isEqual_Integer(p1, p2) /*nogen*/::= "ret = (<p1> == <p2>)"

isEqual_Enumerated(p1, p2) /*nogen*/::= "<isEqual_Integer(p1=p1,p2=p2)>"


isEqual_Boolean(p1, p2) /*nogen*/::= "ret = ( (<p1> && <p2>) || (!<p1> && !<p2>))"

isEqual_Real(p1, p2) ::= "Asn1Real_Equal(<p1>, <p2>)"

isEqual_IA5String(p1, p2) /*nogen*/::= <<
locally {
    val zero = <p1>.indexOfOrLength(UByte.fromRaw(0))
    ret = <p1>.toScala.slice(0, zero).sameElements(<p2>.toScala.slice(0, zero))
}
>>

isEqual_NumericString(p1, p2) /*nogen*/::= "<isEqual_IA5String(p1=p1, p2=p2)>"
isEqual_NullType()/*nogen*/ ::= "ret = true"

isEqual_BitString(p1,p2,bIsFixedSize, nFixedSize) ::= <<
<if(!bIsFixedSize)>
    (<p1>nCount == <p2>nCount) &&
    (<p1>arr.toScala.slice(0,(<p1>nCount/8).toInt).sameElements(<p2>arr.toScala.slice(0,(<p1>nCount/8).toInt))) &&
    (if <p1>nCount % 8 > 0 then (<p1>arr(<p1>nCount.toInt/8).toRaw \>> (8-<p1>nCount % 8).toInt == <p2>arr(<p1>nCount.toInt/8).toRaw \>> (8-<p1>nCount % 8).toInt) else true)

<else>
    (<p1>arr.toScala.slice(0,<nFixedSize>/8).sameElements(<p2>arr.toScala.slice(0,<nFixedSize>/8))) &&
    (if (<nFixedSize> % 8) > 0 then (<p1>arr(<nFixedSize>/8).toRaw \>> (8-<nFixedSize> % 8).toInt == <p2>arr(<nFixedSize>/8).toRaw \>> (8-<nFixedSize> % 8).toInt) else true)

<endif>
>>



isEqual_OctetString(p1,p2, bIsFixedSize, nFixedSize) ::= <<
<if(!bIsFixedSize)>
    (<p1>nCount == <p2>nCount) && (<p1>arr.toScala.slice(0, <p1>nCount.toInt).sameElements(<p2>arr.toScala.slice(0, <p1>nCount.toInt)))
<else>
    <p1>arr.toScala.sameElements(<p2>arr.toScala)
<endif>
>>

isObjectIdentifier_equal(p1, p2) ::= <<
ObjectIdentifier_equal(<p1>, <p2>)
>>



isEqual_Choice_Child(sChoiceTypeDefName, sCid, sInnerStatement, sTmpVarName1, sTmpVarName2) ::= <<
case (<sChoiceTypeDefName>.<sCid>(<sTmpVarName1>), <sChoiceTypeDefName>.<sCid>(<sTmpVarName2>)) =>
    <sInnerStatement>
>>

isEqual_Choice(p1,p2, sAccess, arrsChildren) ::= <<
(<p1>, <p2>) match {
    <arrsChildren: {ch|<ch>}; separator="\n">
    case (_, _) =>
        ret = false
}
>>

isEqual_Sequence_child(p1, p2, sAcc,  bIsOptional, sChName, soInnerStatement) ::= <<
<if(bIsOptional)>
ret = (<p1><sAcc><sChName>.isDefined == <p2><sAcc><sChName>.isDefined)
<if(soInnerStatement)>
if (ret && <p1><sAcc><sChName>.isDefined) then // equal:149
    <soInnerStatement>

<endif>
<else>
<soInnerStatement>

<endif>
>>



isEqual_SequenceOf_var_size(p1,p2, sAcc, i, soInnerStatement) ::= <<
ret = (<p1><sAcc>nCount == <p2><sAcc>nCount)
<if (soInnerStatement)>
<i> = 0
(while (ret && <i> \< <p1><sAcc>nCount) {
    decreases(<p1><sAcc>nCount - <i>)
    <soInnerStatement>
    <i> += 1
}).invariant(0 \<= <i> && <i> \<= <p1><sAcc>nCount)


<endif>
>>

isEqual_SequenceOf_fix_size(p1,p2, sAcc, i, nFixedSize, sInnerStatement) ::= <<
<i> = 0
(while (ret && <i> \< <nFixedSize>) {
    decreases(<nFixedSize> - <i>)
    <sInnerStatement>
    <i> += 1
}).invariant(0 \<= <i> && <i> \<= <nFixedSize>)

>>

call_base_type_func(p1, p2, sFuncName, bIsP1Option, bIsP2Option) ::= <<
<sFuncName>(<p1><if (bIsP1Option)>.get<endif>, <p2><if (bIsP2Option)>.get<endif>) // equal:182
>>

makeExpressionToStatement(sIsValidExp) ::= <<
ret = <sIsValidExp>
>>


callChildEqualFunc(p1, p2,  sChildEqualFuncName) ::= <<
ret = <sChildEqualFuncName>(<p1>, <p2>)
>>
