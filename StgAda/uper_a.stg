group a_uper;


rtlModuleName() ::= "adaasn1rtl"

call_base_type_func_encode(p, sFuncName) ::= "<sFuncName>_aux(<p>, bs, result);"
call_base_type_func_decode(p, sFuncName) ::= "<sFuncName>_aux(<p>, bs, result);"


EmitTypeAssignment_def_err_code(sErrCode, nErrValue) ::= <<
<sErrCode>:constant Integer := <nErrValue>;
>>

EmitTypeAssignment_def_encode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER, soSparkAnnotations, bReqBytesForEncodingIsZero) ::= <<
<arrsErrcodes; separator="\n">
<sTypeDefName>_REQUIRED_BYTES_FOR_ENCODING:constant Integer := <nMaxBytesInPER>;
<sTypeDefName>_REQUIRED_BITS_FOR_ENCODING:constant Integer := <nMaxBitsInPER>;

subtype <sTypeDefName>_uPER_Stream is adaasn1rtl.encoding.Bitstream(<if(bReqBytesForEncodingIsZero)>1<else><sTypeDefName>_REQUIRED_BYTES_FOR_ENCODING<endif>);

procedure <sFuncName> (val : <sTypeDefName>; Stream : out <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT);
procedure <sFuncName>_aux(<sVarName> : <sTypeDefName>; bs : in out <rtlModuleName()>.encoding.Bitstream; result : OUT <rtlModuleName()>.ASN1_RESULT)
<soSparkAnnotations>
;
>>

EmitTypeAssignment_def_decode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInPER, nMaxBitsInPER, soSparkAnnotations, bReqBytesForEncodingIsZero) ::= <<
<arrsErrcodes; separator="\n">
procedure <sFuncName>(<sVarName>: out <sTypeDefName>; Stream : in out <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT);
procedure <sFuncName>_aux(<sVarName>: out <sTypeDefName>; bs : in out <rtlModuleName()>.encoding.Bitstream; result : OUT <rtlModuleName()>.ASN1_RESULT)
<soSparkAnnotations>
;
>>


sparkAnnotations_encode(sTypeDefName) ::= <<
with
    Pre => bs.Current_Bit_Pos \< Natural'Last - <sTypeDefName>_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes \< Positive'Last / 8
      and then bs.Current_Bit_Pos + <sTypeDefName>_REQUIRED_BITS_FOR_ENCODING \<= bs.Size_In_Bytes * 8,
       Post =>
         bs.Current_Bit_Pos \>= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos \<= bs'Old.Current_Bit_Pos + <sTypeDefName>_REQUIRED_BITS_FOR_ENCODING
>>

sparkAnnotations_decode(sTypeDefName) ::= <<
with
    Pre => bs.Current_Bit_Pos \< Natural'Last - <sTypeDefName>_REQUIRED_BITS_FOR_ENCODING
      and then bs.Size_In_Bytes \< Positive'Last / 8
      and then bs.Current_Bit_Pos + <sTypeDefName>_REQUIRED_BITS_FOR_ENCODING \<= bs.Size_In_Bytes * 8,
       Post =>
         bs.Current_Bit_Pos \>= bs'Old.Current_Bit_Pos and bs.Current_Bit_Pos \<= bs'Old.Current_Bit_Pos + <sTypeDefName>_REQUIRED_BITS_FOR_ENCODING
>>

TasEncodeMain(sVarName, sFuncName, sTypeDefName, bReqBytesForEncodingIsZero) ::= /*nogen*/<<
procedure <sFuncName>(<sVarName> : <sTypeDefName>; Stream : out <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT)
is
begin
    Stream := <sTypeDefName>_uPER_Stream'(Size_In_Bytes => <if(bReqBytesForEncodingIsZero)>1<else><sTypeDefName>_REQUIRED_BYTES_FOR_ENCODING<endif>, Current_Bit_Pos  => 0, pushDataPrm  => 0, fetchDataPrm => 0, Buffer => (others => 0));
    <sFuncName>_aux(<sVarName>, Stream, result);
end <sFuncName>;
>>

EmitTypeAssignment_encode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitialExp, bReqBytesForEncodingIsZero, bBsIsUnreferenced, bVarNameIsUnreferenced, soInitFuncName, arrsAnnots, arrsPrecond, soPostcond) ::= <<
procedure <sFuncName>_aux(<sVarName> : <sTypeDefName>; bs : in out <rtlModuleName()>.encoding.Bitstream; result : OUT <rtlModuleName()>.ASN1_RESULT)
is
<if(bBsIsUnreferenced)>
    pragma Unreferenced (bs);

<endif>
<if(bVarNameIsUnreferenced)>
    pragma Unreferenced (<sVarName>);

<endif>

    <arrsLocalVariables; separator="\n">
begin
    <if(soIValidFuncName)>
    result := <soIValidFuncName>(<sVarName>);
    if result.success and  result.ErrorCode = 0 then
        <sContent>
    end if;

    <else>
    result := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
    <sContent>

    <endif>
end <sFuncName>_aux;

<TasEncodeMain(sVarName=sVarName, sFuncName=sFuncName, sTypeDefName=sTypeDefName, bReqBytesForEncodingIsZero=bReqBytesForEncodingIsZero)>
>>

TasDecodeMain(sVarName, sFuncName, sTypeDefName, sInitialExp) ::= /*nogen*/<<
procedure <sFuncName>(<sVarName>:out <sTypeDefName>; Stream : IN OUT <sTypeDefName>_uPER_Stream; result : OUT <rtlModuleName()>.ASN1_RESULT)
is
begin
    Stream.Current_Bit_Pos :=0;
    <sFuncName>_aux(<sVarName>, Stream, result);
    <if(soIValidFuncName)>
    if result.success then
        result := <soIValidFuncName>(<sVarName>);
    end if;

    <endif>
end <sFuncName>;
>>
EmitTypeAssignment_decode(sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitialExp, bReqBytesForEncodingIsZero, bBsIsUnreferenced, bVarNameIsUnreferenced, soInitFuncName, arrsAnnots, arrsPrecond, soPostcond) ::= <<
<if(bVarNameIsUnreferenced)>
pragma Warnings (Off, "unused initial value of ""<sVarName>""");

<endif>
procedure <sFuncName>_aux(<sVarName>: out <sTypeDefName>; bs : in out <rtlModuleName()>.encoding.Bitstream; result : OUT <rtlModuleName()>.ASN1_RESULT)
is
<if(bBsIsUnreferenced)>
    pragma Unreferenced (bs);

<endif>
<if(bVarNameIsUnreferenced)>
    pragma Unreferenced (<sVarName>);

<endif>

    <arrsLocalVariables; separator="\n">
begin
    <if(soInitFuncName)>
    -- <sVarName> := <soInitFuncName>;

    <endif>
    <sContent>
end <sFuncName>_aux;
<if(bVarNameIsUnreferenced)>
pragma Warnings (On, "unused initial value of ""<sVarName>""");

<endif>

<TasDecodeMain(sVarName=sVarName, sFuncName=sFuncName, sTypeDefName=sTypeDefName, sInitialExp=sInitialExp)>
>>


Null_declare(p) ::= ""

decode_nullType(p) ::= <<
<p> := 0;
result := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
>>

/*case: A:: = INTEGER (5..5) */
IntNoneRequired_encode(p, sConst, sErrCode) ::= <<
-- No need to encode value since it will always be <sConst> --
null;
>>

IntNoneRequired_decode(p, sConst, sErrCode) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
<p> := <sConst>;
>>


/*case: A:: = INTEGER (5..20) */
IntFullyConstraint_encode(p, nMin, nMax, nBits, sSsuffix, sErrCode) ::= "adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <p>, <nMin>, <nBits>);"
IntFullyConstraint_decode(p, nMin, nMax, nBits, sSsuffix, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumber<sSsuffix>(bs, <p>, <nMin>, <nMax>, <nBits>, result.Success);
>>

IntFullyConstraintPos_encode(p, nMin, nMax, nBits, sSsuffix, sErrCode, soRangeAssert) ::= "adaasn1rtl.encoding.uper.UPER_Enc_ConstraintPosWholeNumber(bs, <p>, <nMin>, <nBits>);"
IntFullyConstraintPos_decode(p, nMin, nMax, nBits, sSsuffix, sErrCode, soRangeAssert) ::= <<
result.ErrorCode := <sErrCode>;
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintPosWholeNumber<sSsuffix>(bs, <p>, <nMin>, <nMax>, <nBits>, result.Success);
>>

/*case: A :: = INTEGER */
IntUnconstrained_encode(p, sErrCode, bCoverageIgnore) ::= "adaasn1rtl.encoding.uper.UPER_Enc_UnConstraintWholeNumber(bs, <p>);"
IntUnconstrained_decode(p, sErrCode, bCoverageIgnore) ::= <<
result.ErrorCode := <sErrCode>;
adaasn1rtl.encoding.uper.UPER_Dec_UnConstraintWholeNumber(bs, <p>, result.Success);
>>

/*case: A :: = INTEGER(MIN..5) */
IntUnconstrainedMax_encode(p, nMax, soCheckExp, sErrCode) ::= "adaasn1rtl.encoding.uper.UPER_Enc_UnConstraintWholeNumber(bs, <p>);"
IntUnconstrainedMax_decode(p, nMax, soCheckExp, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
adaasn1rtl.encoding.uper.UPER_Dec_UnConstraintWholeNumberMax(bs, <p>, <nMax>, result.Success);
--result.Success := result.Success and then (<soCheckExp>);
>>


/*case: A:: = INTEGER (5..MAX) */
IntSemiConstraint_encode(p, nMin, sErrCode) ::= "adaasn1rtl.encoding.uper.UPER_Enc_SemiConstraintWholeNumber(bs, <p>, <nMin>);"
IntSemiConstraint_decode(p, nMin, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
adaasn1rtl.encoding.uper.UPER_Dec_SemiConstraintWholeNumber(bs, <p>, <nMin>, result.Success);
>>

IntSemiConstraintPos_encode(p, nMin, sErrCode) ::= "adaasn1rtl.encoding.uper.UPER_Enc_SemiConstraintPosWholeNumber(bs, <p>, <nMin>);"
IntSemiConstraintPos_decode(p, nMin, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
adaasn1rtl.encoding.uper.UPER_Dec_SemiConstraintPosWholeNumber(bs, <p>, <nMin>, result.Success);
>>


/*case: A:: = INTEGER (5..40,...) */
IntRootExt_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
if <sRootBaseConstraint> then
    <rtlModuleName()>.encoding.BitStream_AppendBit(bs, 0); -- write extension bit
    <sIntBody>
end if;
>>


IntRootExt_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
result.ErrorCode := <sErrCode>;
<p> := <nMin>;
declare
    extBit:<rtlModuleName()>.BIT;
begin
    <rtlModuleName()>.encoding.BitStream_ReadBit(bs, extBit, result.Success); -- read extension bit
    if result.Success then
        if extBit=0 then --extBit is zero ==> value is expected within root range
            <sIntBody>
        else
            <IntUnconstrained_decode(p=p, sErrCode=sErrCode, bCoverageIgnore="true")>
        end if;
    end if;
end;
>>


/*case: A:: = INTEGER (5..40,..., 60..70) */
IntRootExt2_encode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::=<<
if <sRootBaseConstraint> then
    <rtlModuleName()>.encoding.BitStream_AppendBit(bs, 0); -- value within root range, so ext bit is zero
    <sIntBody>
else
    -- value is not within root range, so ext bit is one and value is encoded as unconstrained
    <rtlModuleName()>.encoding.BitStream_AppendBit(bs, 1);
    <IntUnconstrained_encode(p=p, sErrCode=sErrCode)>
end if;
>>

IntRootExt2_decode(p, nMin, sRootBaseConstraint, sIntBody, sErrCode) ::= "<IntRootExt_decode(p=p, nMin=nMin, sIntBody = sIntBody, sErrCode=sErrCode)>"



Boolean_encode(p, sErrCode) ::= "adaasn1rtl.encoding.uper.UPER_Enc_Boolean(bs, <p>);"

Boolean_decode(p, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
adaasn1rtl.encoding.uper.UPER_Dec_boolean(bs, <p>, result.Success);
>>

Real_encode(p, sSuffix, sErrCode) ::= "adaasn1rtl.encoding.uper.UPER_Enc_Real(bs, <p>);"
Real_decode(p, sSuffix, sErrCode) ::= <<
adaasn1rtl.encoding.uper.UPER_Dec_Real<sSuffix>(bs, <p>, result);
>>

ObjectIdentifier_encode(p, sErrCode) ::= "adaasn1rtl.encoding.uper.ObjectIdentifier_uper_encode(bs, <p>);"
ObjectIdentifier_decode(p, sErrCode) ::= <<
adaasn1rtl.encoding.uper.ObjectIdentifier_uper_decode(bs, <p>, result);
>>

RelativeOID_encode(p, sErrCode) ::= "adaasn1rtl.encoding.uper.RelativeOID_uper_encode(bs, <p>);"
RelativeOID_decode(p, sErrCode) ::= <<
adaasn1rtl.encoding.uper.RelativeOID_uper_decode(bs, <p>, result);
>>


Time_encode(p, sTimeSubType, sErrCode) ::= "adaasn1rtl.encoding.uper.<sTimeSubType>_uper_encode(bs, <p>);"
Time_decode(p, sTimeSubType, sErrCode) ::= <<
adaasn1rtl.encoding.uper.<sTimeSubType>_uper_decode(bs, <p>, result);
>>



/* ENUMERATED START */

Enumerated_item_encode(p, sName, nIndex, nLastItemIndex) ::= "when <sName>    => intVal := <nIndex>;"

Enumerated_item_decode(p, sName, nIndex, nLastItemIndex) ::= "when <nIndex> => <p> := <sName>;"


Enumerated_encode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
declare
    intVal:Asn1Int;
begin
    case <p> is
        <arrsItem; separator="\n">
    end case;
    adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, intVal, <nMin>, <nBits>);
end;
>>

Enumerated_decode(p, td/*:FE_EnumeratedTypeDefinition*/, arrsItem, nMin, nMax, nBits, sErrCode, nLastItemIndex, sFirstItemName) ::= <<
declare
    intVal:Asn1Int;
begin
    adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumber(bs, intVal, <nMin>, <nMax>, <nBits>, result.Success);
    if result.Success then
        case <td.index_range>(intVal) is
            <arrsItem; separator="\n">
        end case;
        result.ErrorCode := 0;
    else
        <p> := <sFirstItemName>;					-- COVERAGE_IGNORE
        result.ErrorCode := <sErrCode>;				-- COVERAGE_IGNORE
    end if;
end;
>>

Enumerated_no_switch_encode(p, td/*:FE_EnumeratedTypeDefinition*/, sErrCode, sEnumIndex, nLastItemIndex, sFirstItemName) ::= <<
>>

Enumerated_no_switch_decode(p, td/*:FE_EnumeratedTypeDefinition*/, sErrCode, sEnumIndex, nLastItemIndex, sFirstItemName) ::= <<
>>



/* ENUMERATED START */

/* SEQUENCE START */

decode_empty_sequence_emptySeq(p) ::= <<
<p> := (null record);
result := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
>>



sequence_presence_bit_encode(p, sAcc, sChName, soExistVar, sErrCode) ::= "<rtlModuleName()>.encoding.BitStream_AppendBit(bs,<p>.Exist.<sChName>);"
sequence_presence_bit_decode(p, sAcc, sChName, soExistVar, sErrCode) ::= <<
result.ErrorCode := <sErrCode>;
<rtlModuleName()>.encoding.BitStream_ReadBit(bs,<p>.Exist.<sChName>, result.Success);
>>


sequence_presence_bit_fix_encode(p, sAcc, sChName, soExistVar, sErrCode, sVal) ::= "<rtlModuleName()>.encoding.BitStream_AppendBit(bs, <sVal>);"
sequence_presence_bit_fix_decode(p, sAcc, sChName, soExistVar, sErrCode, sVal) ::= <<
<sequence_presence_bit_decode(p=p, sAcc=sAcc, sChName=sChName, soExistVar=soExistVar, sErrCode=sErrCode)>
>>


sequence_mandatory_child_encode(sChName, sChildContent) ::= <<
--Encode <sChName>
<sChildContent>
>>

sequence_mandatory_child_decode(sChName, sChildContent) ::= <<
--Decode <sChName>
<sChildContent>
>>


sequence_optional_child_encode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef) ::= <<
--Encode <sChName>
if <p>.Exist.<sChName> = 1 then
	<sChildContent>
end if;
>>

sequence_optional_child_decode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef) ::= <<
--Decode <sChName>
if <p>.Exist.<sChName> = 1 then
	<sChildContent>
end if;
>>


sequence_default_child_encode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef, sInitWithDefaultValue) ::= <<
<sequence_optional_child_encode(p=p, sAcc=sAcc, sChName=sChName, soExistVar=soExistVar, soChildExpr=soChildExpr, sChildTypedef=sChildTypedef, sChildContent=sChildContent)>
>>


sequence_default_child_decode(p, sAcc, sChName, sChildContent, soExistVar, soChildExpr, sChildTypedef, sInitWithDefaultValue) ::= <<
--Decode <sChName>
if <p>.Exist.<sChName> = 1 then
	<sChildContent>
else
    <sInitWithDefaultValue>
end if;
>>


JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if result.Success then
    <soNestedPart>
end if;
<endif>
>>

update_array_item(p, sI, sExpr) ::= ""

sequence_build(p, sTypeDefName, bIsOptional, arrsChildren) ::= ""

/* SEQUENCE end */



/* CHOICE START*/

choice_child_encode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr, bIsSequence, bIsEnum) ::= <<
when <sChildID> =>
    adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <nChildIndex>, 0, <nIndexSizeInBits>);
    <sChildContent>
>>

choice_child_decode(p, sAcc, sChildID, nChildIndex, nIndexSizeInBits, nLastItemIndex, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName, sChildInitExpr, bIsSequence, bIsEnum) ::= <<
when <nChildIndex> =>
<p> := <sChoiceTypeName>'(kind => <sChildID>, <sChildName> => <sChildInitExpr>);
<sChildContent>
>>


choice_encode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, td/*:FE_ChoiceTypeDefinition*/, nIndexSizeInBits, bIntroSnap) ::= <<
case <p><sAcc>kind is
    <arrsChildren; separator="\n">
end case;
>>

choice_decode(p, sAcc, arrsChildren, nLastItemIndex, sChoiceIndexName, sErrCode, td/*:FE_ChoiceTypeDefinition*/, nIndexSizeInBits, bIntroSnap) ::= <<
result.ErrorCode := <sErrCode>;
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumber(bs, <sChoiceIndexName>, 0, <nLastItemIndex>, <nIndexSizeInBits>, result.Success);
if result.Success and <sChoiceIndexName> \>= 0 and  <sChoiceIndexName> \<= <nLastItemIndex> then
    case <td.index_range>(<sChoiceIndexName>) is
        <arrsChildren; separator="\n">
    end case;
end if;
>>

/* CHOICE end*/








loopFixedItem_enc (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<
while <i>\<= <fixedSize> loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<fixedSize>);
    pragma Loop_Invariant (bs.Current_Bit_Pos \>= bs.Current_Bit_Pos'Loop_Entry);
    pragma Loop_Invariant (bs.Current_Bit_Pos\<=bs.Current_Bit_Pos'Loop_Entry + <nIntItemMaxSize>*(<i>-1));
    <sInternalItem>
    <i> := <i> + 1;
end loop;
>>


loopFixedItem_dec (i, fixedSize, nfixedSizeUperLimit, sInternalItem, nCurOffset, nAlignSize, nIntItemMinSize, nIntItemMaxSize)::= /*nogen*/<<
while <i>\<= <fixedSize> AND result.Success loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<fixedSize>);
    pragma Loop_Invariant (bs.Current_Bit_Pos \>= bs.Current_Bit_Pos'Loop_Entry);
    pragma Loop_Invariant (bs.Current_Bit_Pos \<= bs.Current_Bit_Pos'Loop_Entry + <nIntItemMaxSize>*(<i>-1));
    <sInternalItem>
    <i> := <i> + 1;
end loop;
>>












/* IA5String & Numeric String */


InternalItem_string_no_alpha_encode(p, sErrCode, i) ::=<<
charIndex := <rtlModuleName()>.CharacterPos(<p>(<i>));
adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(charIndex), 0, 7);
>>


InternalItem_string_no_alpha_decode(p, sErrCode, i) ::=<<
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, charIndex, 0, 127, 7, result.Success);
result.ErrorCode := <sErrCode>;
<p>(<i>) := Character'Val(charIndex);
>>


InternalItem_string_with_alpha_encode(p, sErrCode, td/*:FE_StringTypeDefinition*/, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
charIndex := <rtlModuleName()>.GetZeroBasedCharIndex(<p>(<i>), <td.alpha_set>);
adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(charIndex), 0, <nCharIndexSize>);
>>

InternalItem_string_with_alpha_decode(p, sErrCode, td/*:FE_StringTypeDefinition*/, i, nLastItemIndex, arrnAlphabetAsciiCodes, nAlphabetLength, nCharIndexSize) ::=<<
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, charIndex, 0, <nLastItemIndex>, <nCharIndexSize>, result.Success);
result.ErrorCode := <sErrCode>;
<p>(<i>) := <td.alpha_set>(charIndex+1);
>>




str_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize, soInitExpr, bIntroSnap, soCallAux) ::= <<
<i> := 1;
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

str_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize, soInitExpr, bIntroSnap, soCallAux) ::= <<
--val := <sTasName>_Init;
result := <rtlModuleName()>.ASN1_RESULT'(Success => True, ErrorCode => 0);
<i> := 1;
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
<p>(<nFixedSize> + 1) := adaasn1rtl.NUL;
>>

str_VarSize_encode(p, sPIden, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, soInitExpr, soCallAux) ::= <<
nStringLength := <rtlModuleName()>.getStringSize(<p>);
result.Success := nStringLength >= <nSizeMin> AND nStringLength \<= <nSizeMax>;
<i> := 1;
if result.Success then
    adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(nStringLength), <nSizeMin>, <nSizeInBits>);
    <loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
end if;
>>

str_VarSize_decode(p, sPIden, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, soInitExpr, soCallAux) ::= <<
--val := <sTasName>_Init;
result.ErrorCode := <rtlModuleName()>.ERR_INSUFFICIENT_DATA;
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, nStringLength, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
<i> := 1;
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize="nStringLength", nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>

--add nulls until the end
while <i>\<= <nSizeMax> + 1  loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<nSizeMax> + 1);
    <p>(<i>) := adaasn1rtl.NUL;
    <i> := <i> + 1;
end loop;
>>





/* OCTET AND BIT STRING*/

InternalItem_bit_str_encode(p, i, sErrCode) ::=<<
<rtlModuleName()>.encoding.BitStream_AppendBit(bs, <p>.Data(<i>));
>>

InternalItem_bit_str_decode(p, i, sErrCode) ::=<<
<rtlModuleName()>.encoding.BitStream_ReadBit(bs, <p>.Data(<i>), result.Success);
if not result.Success then
    result.errorcode := <sErrCode>;		-- COVERAGE_IGNORE
end if;
>>

InternalItem_oct_str_encode(p, sAcc, i, sErrCode) ::=<<
<rtlModuleName()>.encoding.BitStream_AppendByte(bs, <p>.Data(<i>), FALSE);
>>

InternalItem_oct_str_decode(p, sAcc, i, sErrCode) ::=<<
<rtlModuleName()>.encoding.BitStream_DecodeByte(bs, <p>.Data(<i>), result.Success);
if not result.Success then
    result.errorcode := <sErrCode>; -- COVERAGE_IGNORE
end if;
>>

octet_FixedSize_encode(sTypeDefName, p, sAcc, nFixedSize) ::= <<
adaasn1rtl.encoding.uper.BitStream_EncodeOctetString_no_length(bs, <p><sAcc>Data, Integer(<nFixedSize>));
>>

octet_FixedSize_decode(sTypeDefName, p, sAcc, nFixedSize) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => True, ErrorCode => 0);
adaasn1rtl.encoding.uper.BitStream_DecodeOctetString_no_length(bs, <p><sAcc>Data, Integer(<nFixedSize>), result.success);
>>

octet_VarSize_encode(sTypeDefName, p, sAcc, nSizeMin, nSizeMax, nSizeInBits, sErrCode) ::= <<
result.Success := <p><sAcc>Length >= <nSizeMin> AND <p><sAcc>Length \<= <nSizeMax>;
result.errorCode := <sErrCode>;
if result.Success then
    adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(<p><sAcc>Length), <nSizeMin>, <nSizeInBits>);
    adaasn1rtl.encoding.uper.BitStream_EncodeOctetString_no_length(bs, <p><sAcc>Data, Integer(<p><sAcc>Length));
end if;
>>

octet_VarSize_decode(sTypeDefName, p, sAcc, nSizeMin, nSizeMax, nSizeInBits, sErrCode) ::= <<
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, nStringLength, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
result.errorCode := <sErrCode>;
<p>.Length := nStringLength;
if result.Success then
    adaasn1rtl.encoding.uper.BitStream_DecodeOctetString_no_length(bs, <p><sAcc>Data, Integer(<p><sAcc>Length), result.success);
end if;
>>

seqOf_FixedSize_encode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sChildInitExpr, soCallAux) ::= <<
<i> := 1;
<loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

seqOf_FixedSize_decode(p, sTasName, i, sInternalItem, nFixedSize, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sChildInitExpr, soCallAux) ::= <<
result := <rtlModuleName()>.ASN1_RESULT'(Success => True, ErrorCode => 0);
<i> := 1;
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=nFixedSize, nfixedSizeUperLimit = nFixedSize, nCurOffset="0", nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>

seqOf_VarSize_encode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sChildInitExpr, sErrCode, nAbsOffset, nRemainingMinBits, nLevel, nIx, nOffset, bIntroSnap, soCallAux) ::= <<
result.Success := <p><sAcc>Length >= <nSizeMin> AND <p><sAcc>Length \<= <nSizeMax>;
result.errorCode := <sErrCode>;
<i> := 1;
if result.Success then
    adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(<p><sAcc>Length), <nSizeMin>, <nSizeInBits>);
    <loopFixedItem_enc(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
end if;
>>

seqOf_VarSize_decode(p, sAcc, sTasName, i, sInternalItem, nSizeMin, nSizeMax, nSizeInBits, nIntItemMinSize, nIntItemMaxSize, nAlignSize, sChildInitExpr, sErrCode, nAbsOffset, nRemainingMinBits, nLevel, nIx, nOffset, bIntroSnap, soCallAux) ::= <<
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, nStringLength, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
result.errorCode := <sErrCode>;
<i> := 1;
<p>.Length := nStringLength;
<loopFixedItem_dec(i=i, sInternalItem=sInternalItem, fixedSize=[p, sAcc, "Length"], nfixedSizeUperLimit = nSizeMax, nCurOffset=nSizeInBits, nAlignSize=nAlignSize, nIntItemMinSize=nIntItemMinSize, nIntItemMaxSize=nIntItemMaxSize)>
>>









FixedSize_Fragmentation_sqf_64K_encode(p, sAcc,sCurOffset, sCurBlockSize, sBlockIndex, nBlocks64K, sInternalItem, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
--encode <nBlocks64K> x 64K Blocks
<sCurBlockSize> := 16#10000#;
<sCurOffset> := 1;
for <sBlockIndex> in 1 .. <nBlocks64K> loop
    adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, 16#C4#, 0, 8);
	for <sBLI> in <sCurOffset> .. <sCurOffset> + <sCurBlockSize> -1 loop
		<sInternalItem>
	end loop;
    <sCurOffset> := <sCurOffset> + <sCurBlockSize>;
end loop;
>>

FixedSize_Fragmentation_sqf_small_block_encode(p, sAcc,sInternalItem, nBlockSize, sBlockId, sCurOffset, sCurBlockSize, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
--encode <nBlockSize> Block
<sCurBlockSize> := <nBlockSize>;
adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <sBlockId>, 0, 8);
for <sBLI> in <sCurOffset> .. <sCurOffset> + <sCurBlockSize> -1 loop
	<sInternalItem>
end loop;
<sCurOffset> := <sCurOffset> + <sCurBlockSize>;
>>


FixedSize_Fragmentation_sqf_remaining_encode(p, sAcc,sInternalItem, bRemainingItemsWithinByte, nRemainingItemsVar, sCurOffset, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::= <<
--encoding remaining <nRemainingItemsVar> items
<if(bRemainingItemsWithinByte)>
adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(<nRemainingItemsVar>), 0, 8);

<else>
<rtlModuleName()>.encoding.BitStream_AppendBit(bs, 1);
adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(<nRemainingItemsVar>), 0, 15);

<endif>
for <sBLI> in <sCurOffset> .. <sCurOffset> + <nRemainingItemsVar> -1 loop
	<sInternalItem>
end loop;
>>

FixedSize_Fragmentation_sqf_encode(p, sAcc, arrsEncodingParts, nFixedSize, bIsBitStringType) ::= <<
<arrsEncodingParts; separator="\n">
>>


Fragmentation_sqf_encode(p, sAcc, sInternalItem, nIntItemMaxSize, nSizeMin, nSizeMax, nRequiredBitsForUPerEncoding, bIsVariableSize, sErrCodeName, sRemainingItemsVar, sCurBlockSize, sBlockIndex, sCurOffset, sBLJ, sBLI, sLengthTmp, bIsBitStringType, bIsAsciiString) ::= <<
<sCurOffset> := 1;
<sRemainingItemsVar> := <if(bIsAsciiString)><rtlModuleName()>.getStringSize(<p>)<else><if(bIsVariableSize)><p><sAcc>Length<else><nSizeMax><endif><endif>;
<sBlockIndex>:=1;
while <sRemainingItemsVar> >= 16#4000# and <sBlockIndex> \< <if(bIsAsciiString)><rtlModuleName()>.getStringSize(<p>)<else><if(bIsVariableSize)><p><sAcc>Length<else><nSizeMax><endif><endif> loop
    if <sRemainingItemsVar> >= 16#10000# then
        <sCurBlockSize> := 16#10000#;
        adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, 16#C4#, 0, 8);
    elsif <sRemainingItemsVar> >= 16#C000# then
        <sCurBlockSize> := 16#C000#;
        adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, 16#C3#, 0, 8);
    elsif <sRemainingItemsVar> >= 16#8000# then
        <sCurBlockSize> := 16#8000#;
        adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, 16#C2#, 0, 8);
    else
        <sCurBlockSize> := 16#4000#;
        adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, 16#C1#, 0, 8);
    end if;

    -- set1

	<sBLJ> := 0;
	while <sBLJ> \<= <sCurBlockSize>-1 loop
		<sBLI> := <sCurOffset> + <sBLJ>;
        -- set2
		<sInternalItem>
		<sBLJ> := <sBLJ> + 1;
	end loop;
    <sCurOffset> := <sCurOffset> + <sCurBlockSize>;
    <sRemainingItemsVar> := <sRemainingItemsVar> - <sCurBlockSize>;

    <sBlockIndex>:=<sBlockIndex>+1;
end loop;

if <sRemainingItemsVar> \<= 16#7F# then
    adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(<sRemainingItemsVar>), 0, 8);
else
    <rtlModuleName()>.encoding.BitStream_AppendBit(bs, 1);
    adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(<sRemainingItemsVar>), 0, 15);
end if;

<sBLJ> := 0;
<sCurBlockSize> := <sRemainingItemsVar>;
while <sBLJ> \<= <sCurBlockSize>-1 loop
	<sBLI> := <sCurOffset> + <sBLJ>;
    --set3
	<sInternalItem>
	<sBLJ> := <sBLJ> + 1;
end loop;

>>








FixedSize_Fragmentation_sqf_decode(p, sAcc, arrsEncodingParts, nFixedSize, bIsBitStringType) ::= <<
<arrsEncodingParts; separator="\n">
<if(bIsBitStringType)>
<p>(<nFixedSize> + 1) := adaasn1rtl.NUL;

<endif>
>>

FixedSize_Fragmentation_sqf_64K_decode(p, sAcc,sCurOffset, sCurBlockSize, sBlockIndex, nBlocks64K, sInternalItem, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
--we expect to decode <nBlocks64K> Blocks and each block must contain 64K elements. Each block must begin with the byte 0xC4
<sCurBlockSize> := 16#10000#;
<sCurOffset> := 1;
result.ErrorCode := <sErrCodeName>;
for <sBlockIndex> in 1 .. <nBlocks64K>  loop
    adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, <sRemainingItemsVar>, 0, 255, 8, result.Success);
    result.Success := result.Success AND (<sRemainingItemsVar> = 16#C4#);
    exit when not Result.Success;

	for <sBLI> in <sCurOffset> .. <sCurOffset> + <sCurBlockSize> -1 loop
		<sInternalItem>
        exit when not Result.Success;
	end loop;

    <sCurOffset> := <sCurOffset> + <sCurBlockSize>;
     exit when not Result.Success;
end loop;
>>


FixedSize_Fragmentation_sqf_small_block_decode(p, sAcc,sInternalItem, nBlockSize, sBlockId, sCurOffset, sCurBlockSize, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::=<<
--decode a single Block with <nBlockSize> items
<sCurBlockSize> := <nBlockSize>;
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, <sRemainingItemsVar>, 0, 255, 8, result.Success);
result.Success  := result.Success AND (<sRemainingItemsVar> = <sBlockId>);
if result.Success then
    for <sBLI> in <sCurOffset> .. <sCurOffset> + <sCurBlockSize> -1 loop
	    <sInternalItem>
        exit when not Result.Success;
    end loop;

    <sCurOffset> := <sCurOffset> + <sCurBlockSize>;
end if;
>>

FixedSize_Fragmentation_sqf_remaining_decode(p, sAcc,sInternalItem, bRemainingItemsWithinByte, nRemainingItemsVar, sCurOffset, sBLI, sRemainingItemsVar, bIsBitStringType, sErrCodeName) ::= <<
--decode remaining <nRemainingItemsVar> items
<if(bRemainingItemsWithinByte)>
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, <sRemainingItemsVar>, 0, 255, 8, result.Success);
result.Success  := result.Success AND (<sRemainingItemsVar> = <nRemainingItemsVar>);

<else>
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, <sRemainingItemsVar>, 0, 16#FFFF#, 16, result.Success);
result.Success := result.Success AND ((adaasn1rtl.Asn1UInt(16#8000#) AND adaasn1rtl.Asn1UInt(<sRemainingItemsVar>)) > 0) AND ( (adaasn1rtl.Asn1UInt(16#7FFF#) AND adaasn1rtl.Asn1UInt(<sRemainingItemsVar>)) = adaasn1rtl.Asn1UInt(<nRemainingItemsVar>));

<endif>
if result.Success then
    for <sBLI> in <sCurOffset> .. <sCurOffset> + <nRemainingItemsVar> -1 loop
	    <sInternalItem>
        exit when not Result.Success;
    end loop;
end if;
>>



Fragmentation_sqf_decode(p, sAcc, sInternalItem, nIntItemMaxSize, nSizeMin, nSizeMax, nRequiredBitsForUPerEncoding, bIsVariableSize, sErrCodeName, sRemainingItemsVar, sCurBlockSize, sBlockIndex, sCurOffset, sBLJ, sBLI, sLengthTmp, bIsBitStringType, bIsAsciiString) ::= <<
<if(bIsVariableSize)><sLengthTmp> := 0;<endif>
<sCurBlockSize> := 0;
result.ErrorCode := <sErrCodeName>;
-- decode blockSize
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, <sRemainingItemsVar>, 0, 255, 8, result.Success);
<sCurOffset> := 1;

while result.Success AND (<sRemainingItemsVar> = 16#C4# OR <sRemainingItemsVar> = 16#C3# OR <sRemainingItemsVar> = 16#C2# OR <sRemainingItemsVar> = 16#C1#)  loop
    --# assert <sBLI> >=<sCurOffset> and <sBLI>\<=<sCurOffset> + <sRemainingItemsVar> ;
    if <sRemainingItemsVar> = 16#C4# then
        <sCurBlockSize> := 16#10000#;
    elsif <sRemainingItemsVar> = 16#C3# then
        <sCurBlockSize> := 16#C000#;
    elsif <sRemainingItemsVar> = 16#C2# then
        <sCurBlockSize> := 16#8000#;
    else
        <sCurBlockSize> := 16#4000#;
    end if;

    <sBLI> := <sCurOffset>;
    while <sBLI>\<= <sCurOffset> + <sCurBlockSize> - 1 AND result.Success loop
    --# assert  <sBLI> >=<sCurOffset> and <sBLI>\<=<sCurOffset> + <sRemainingItemsVar>  and
    --#        K.K>=K~.K and K.K\<=K~.K+8+ <nIntItemMaxSize>*(<sBLI>-1);
        <sInternalItem>
        <sBLI> := <sBLI> + 1;
    end loop;
    <if(bIsVariableSize)><sLengthTmp> := <sLengthTmp> + <sCurBlockSize>;<endif>
    <sCurOffset> := <sCurOffset> + <sCurBlockSize>;
    adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, <sRemainingItemsVar>, 0, 255, 8, result.Success);
end loop;

if <sRemainingItemsVar> >= 16#80# then
    declare
        len2:Integer;
    begin
        <sRemainingItemsVar> := (<sRemainingItemsVar> - 16#80#) * 16#100#;
        adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, len2, 0, 255, 8, result.Success);
        if result.Success then
             <sRemainingItemsVar> := <sRemainingItemsVar> + len2;
        end if;
    end;
end if;

if <sCurOffset> + <sRemainingItemsVar> -1 \<= <nSizeMax> then
    <sBLI> := <sCurOffset>;
    while <sBLI>\<= <sCurOffset> + <sRemainingItemsVar> -1 loop
    --# assert  <sBLI> >=<sCurOffset> and <sBLI>\<=<sCurOffset> + <sRemainingItemsVar>  and
    --#        K.K>=K~.K and K.K\<=K~.K+8+ <nIntItemMaxSize>*(<sBLI>-1);
        <sInternalItem>
        <sBLI> := <sBLI> + 1;
    end loop;
    <if(bIsVariableSize)><sLengthTmp> := <sLengthTmp> + <sRemainingItemsVar>;<endif>
end if;

<if(bIsVariableSize)>

if <sLengthTmp> >= <nSizeMin> and <sLengthTmp> \<= <nSizeMax> then
    <if(!bIsAsciiString)>
    <p><sAcc>Length := <sLengthTmp>;

    <else>
    <p>(<sLengthTmp> + 1) := adaasn1rtl.NUL;

    --add nulls until the end
    while <sBLI>\<= <nSizeMax> + 1  loop
        pragma Loop_Invariant (<sBLI> >=1 and <sBLI>\<=<nSizeMax> + 1);
        <p>(<sBLI>) := adaasn1rtl.NUL;
        <sBLI> := <sBLI> + 1;
    end loop;


    <endif>
else
    result.Success := false;	--COVERAGE_IGNORE
end if;

<else>
<if(bIsAsciiString)>
<p>(<nSizeMax> + 1) := adaasn1rtl.NUL;

<endif>

<endif>
>>



octet_string_containing_func_encode(p, sFuncName, sReqBytesForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
--open new scope to declare some variables
declare
    tmpBs : adaasn1rtl.encoding.Bitstream := adaasn1rtl.encoding.BitStream_init(<sReqBytesForUperEncoding>);
	data_length : Integer;
begin
	--encode value to a temporary bit stream
	<sFuncName>_aux(<p>, tmpBs, result);
	if result.success then
		data_length := adaasn1rtl.encoding.BitStream_current_length_in_bytes(tmpBs);
		adaasn1rtl.encoding.uper.BitStream_EncodeOctetString(bs, tmpBs.Buffer, data_length, <nBits>, <nMinSize>, <nMaxSize>);
	end if;
end;
>>

octet_string_containing_func_decode(p, sFuncName, sReqBytesForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
--open new scope to declare some variables
declare
    tmpBs : adaasn1rtl.encoding.Bitstream := adaasn1rtl.encoding.BitStream_init(<sReqBytesForUperEncoding>);
	data_length : Integer;
begin
	--decode to a temporary bitstream
	adaasn1rtl.encoding.uper.BitStream_DecodeOctetString(bs, tmpBs.Buffer, data_length, <nBits>, <nMinSize>, <nMaxSize>, result.success);
	if result.success then
		<sFuncName>_aux(<p>, tmpBs, result);
	end if;
end;
>>


bit_string_containing_func_encode(p, sFuncName, sReqBytesForUperEncoding, sReqBitsForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
--open new scope to declare some variables
declare
    tmpBs : adaasn1rtl.encoding.Bitstream := adaasn1rtl.encoding.BitStream_init(<sReqBytesForUperEncoding>);
	data_length : Integer;
begin
	--encode value to a temporary bit stream
	<sFuncName>_aux(<p>, tmpBs, result);
	if result.success then
		data_length := tmpBs.Current_Bit_Pos;
		adaasn1rtl.encoding.uper.BitStream_EncodeBitString(bs, tmpBs.Buffer, data_length, <nBits>, <nMinSize>, <nMaxSize>);
	end if;
end;
>>

bit_string_containing_func_decode(p, sFuncName, sReqBytesForUperEncoding, sReqBitsForUperEncoding, nBits, nMinSize, nMaxSize) ::= <<
--open new scope to declare some variables
declare
    tmpBs : adaasn1rtl.encoding.Bitstream := adaasn1rtl.encoding.BitStream_init(<sReqBytesForUperEncoding>);
	data_length : Integer;
begin
	--decode to a temporary bitstream
	adaasn1rtl.encoding.uper.BitStream_DecodeBitString(bs, tmpBs.Buffer, data_length, <nBits>, <nMinSize>, <nMaxSize>, result.success);
	if result.success then
		<sFuncName>_aux(<p>, tmpBs, result);
	end if;
end;
>>




/* BIT STRING*/
bitString_FixSize_encode(sTypeDefName, p, sAcc, nFixedSize, sErrCode) ::= <<
adaasn1rtl.encoding.BitStream_AppendBitArray(bs, <p><sAcc>Data, Integer(<nFixedSize>));
>>

bitString_FixSize_decode(sTypeDefName, p, sAcc, nFixedSize, sErrCode) ::= <<
adaasn1rtl.encoding.BitStream_ReadBitArray(bs, <p><sAcc>Data, Integer(<nFixedSize>), result.success);
if not result.Success then
    result.errorcode := <sErrCode>; -- COVERAGE_IGNORE
end if;
>>

bitString_VarSize_encode(sTypeDefName, p, sAcc, nSizeMin, nSizeMax, sErrCode, nSizeInBits) ::= <<
result.Success := <p><sAcc>Length >= <nSizeMin> AND <p><sAcc>Length \<= <nSizeMax>;
result.errorCode := <sErrCode>;
if result.Success then
    adaasn1rtl.encoding.uper.UPER_Enc_ConstraintWholeNumber(bs, <rtlModuleName()>.Asn1Int(<p><sAcc>Length), <nSizeMin>, <nSizeInBits>);
    <bitString_FixSize_encode(sTypeDefName=sTypeDefName, p=p, sAcc=sAcc, nFixedSize=[p, sAcc,"Length"], sErrCode=sErrCode)>
end if;
>>

bitString_VarSize_decode(sTypeDefName, p, sAcc, nSizeMin, nSizeMax, sErrCode, nSizeInBits) ::= <<
adaasn1rtl.encoding.uper.UPER_Dec_ConstraintWholeNumberInt(bs, nStringLength, <nSizeMin>, <nSizeMax>, <nSizeInBits>, result.Success);
result.errorCode := <sErrCode>;
if result.Success then
	<p><sAcc>Length := nStringLength;
	<bitString_FixSize_decode(sTypeDefName=sTypeDefName, p=p, sAcc=sAcc, nFixedSize=[p,sAcc, "Length"], sErrCode=sErrCode)>
end if;
>>