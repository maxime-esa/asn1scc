group a_init;


rtlModuleName() ::= "adaasn1rtl"
methodNameSuffix() ::= "_Init"


initTypeAssignment_def(sVarName, sStar, sFuncName, sTypeDefName) ::= <<
procedure <sFuncName>(<sVarName>: out <sTypeDefName>);
>>

initTypeAssignment(sVarName, sPtrPrefix, sPtrSuffix, sFuncName, sTypeDefName, sContent, arrsLocalVariables, sDefaultInitValue, arrsAnnots) ::= <<
procedure <sFuncName>(<sVarName>: out <sTypeDefName>)
is
    <arrsLocalVariables; separator="\n">
begin
    <sContent>
end <sFuncName>;
>>


assignAny(p, sValue, sTypeDecl) ::= "<p> := <sValue>;"
assignString(p, sValue) ::= "<p> := <sValue>;"


initInteger(p, sValue, bIsOptional, sResVar) ::= "<p> := <sValue>;"
initReal(p, dValue, bIsOptional, sResVar) ::= "<p> := <dValue>;"
initBoolean(p, bValue, bIsOptional, sResVar) ::= "<p> := <if(bValue)>True<else>FALSE<endif>;"

initIA5String(sPtr, sValue, bIsOptional, sResVar) ::= "<sPtr> := <sValue>;"
initEnumerated(sVal, sValue, sTypeDefName, bIsOptional, sResVar) ::= "<sVal> := <sValue>;"
initNull(sVal, bIsOptional, sResVar) ::= "<sVal> := 0;"


initTestCaseIA5String(p, sAcc, nSize, nMaxSizePlusOne, i, td/*:FE_StringTypeDefinition*/, bAlpha, arrnAlphabetAsciiCodes, nAlphabetLength, bZero, sResVar) ::= <<
<i> := 1;
while <i>\<= <nMaxSizePlusOne> loop
    --  commented because it casues this warning
    --  warning: condition can only be False if invalid values present
    pragma Loop_Invariant (<i> >=1 and <i>\<=<nMaxSizePlusOne>);
    <if(bZero)>
    <p>(<i>) := <rtlModuleName()>.NUL;

    <else>
    if <i> \<= <nSize> then
    <if(bAlpha)>
        <p>(<i>) := <td.alpha_set>( ((<i>-1) mod <td.alpha_set>'Last) + 1 );

    <else>
        <p>(<i>) := Character'Val(Integer'Pos( if ((<i>-1) mod 128) = 0 then 65 else (<i>-1) mod 128));

    <endif>
    else
        <p>(<i>) := <rtlModuleName()>.NUL;
    end if;

    <endif>
    <i> := <i> + 1;
end loop;
>>

initObjectIdentifier_valid(p, sAcc, sI, nIntVal) ::= "<p><sAcc>values(<sI>) := <nIntVal>;"
initObjectIdentifier(p, sAcc, nSize, arrsValues) ::= <<
<p><sAcc>length := <nSize>;
<arrsValues; separator="\n">
>>

init_Asn1LocalTime(p, sAcc, tv/*:Asn1TimeValue*/) ::= <<
<p><sAcc>hours := <tv.hours>;
<p><sAcc>mins := <tv.mins>;
<p><sAcc>sec := <tv.secs>;
<p><sAcc>fraction := <tv.secsFraction>;
>>

init_Asn1UtcTime(p, sAcc, tv/*:Asn1TimeValue*/) ::= <<
<p><sAcc>hours := <tv.hours>;
<p><sAcc>mins := <tv.mins>;
<p><sAcc>sec := <tv.secs>;
<p><sAcc>fraction := <tv.secsFraction>;
>>


init_Asn1LocalTimeWithTimeZone(p, sAcc, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<p><sAcc>hours := <tv.hours>;
<p><sAcc>mins := <tv.mins>;
<p><sAcc>sec := <tv.secs>;
<p><sAcc>fraction := <tv.secsFraction>;
<p><sAcc>tz.sign := <tz.sign>;
<p><sAcc>tz.hours := <tz.hours>;
<p><sAcc>tz.mins := <tz.mins>;
>>

init_Asn1Date(p, sAcc, dt/*:Asn1DateValue*/) ::= <<
<p><sAcc>years := <dt.years>;
<p><sAcc>months := <dt.months>;
<p><sAcc>days := <dt.days>;
>>

init_Asn1Date_LocalTime(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1LocalTime(p=p, sAcc=sAcc, tv=tv)>
>>

init_Asn1Date_UtcTime(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1UtcTime(p=p, sAcc=sAcc, tv=tv)>
>>

init_Asn1Date_LocalTimeWithTimeZone(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1UtcTime(p=p, sAcc=sAcc, tv=tv, tz=tz)>
>>



/* BIT AND OCTET STRINGS */


initBitOrOctStringFromCompoundLiteral(p, sCompLiteral) ::= "<p> := <sCompLiteral>;"
initFixSizeBitOrOctString_bytei(p, sAcc, sI, sByteHexVal) ::= "<p><sAcc>Data(<sI>) := 16#<sByteHexVal>#;"
initFixSizeBitOrOctString(p, sAcc,arrsBytes) ::= <<
<arrsBytes; separator="\n">
>>
initFixVarSizeBitOrOctString(p, sAcc, nSize, arrsBytes) ::= <<
<p><sAcc>Length := <nSize>;
<arrsBytes; separator="\n">
>>

initTestCaseOctetString(p, sAcc, sArrayHolderName, nSize, i, bIsFixedSize, bZero, nMinSize, bZeroSizedArray, sResVar) ::= <<
<i> := 1;
while <i>\<= <nSize> loop
    --  commented because it casues this warning
    --  warning: condition can only be False if invalid values present
    <if(!bZeroSizedArray)>pragma Loop_Invariant (<i> >=1 and <i>\<=<nSize>);<endif>
    <if(!bZeroSizedArray)><p><sAcc>Data(<i>) := <rtlModuleName()>.Asn1Byte(<if(bZero)>0<else>(<i>-1) mod 256<endif>);<endif>
    <i> := <i> + 1;
end loop;
<if(!bIsFixedSize)><p><sAcc>Length := <if(bZero)><nMinSize><else><nSize><endif>;<endif>
>>

initTestCaseBitString(p, sAcc, sArrayHolderName, nSize, nSizeCeiled, i, bIsFixedSize, bZero, nMinSize, bIsOptionalField, sResVar) ::= <<
<i> := 1;
while <i>\<= <nSize> loop
    --  commented because it casues this warning
    --  warning: condition can only be False if invalid values present
    pragma Loop_Invariant (<i> >=1 and <i>\<=<nSize>);
    <p><sAcc>Data(<i>) := <rtlModuleName()>.BIT(<if(bZero)>0<else>(<i>-1) mod 2<endif>);
    <i> := <i> + 1;
end loop;
<if(!bIsFixedSize)><p><sAcc>Length := <if(bZero)><nMinSize><else><nSize><endif>;<endif>
>>


/*SEQUENCE OF */

initSequence_pragma(p) ::= <<
pragma Annotate (GNATprove, False_Positive,"""<p>.Data"" might not be initialized", "Data are reserved by caller");
>>

initFixedSequenceOf(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">
>>


initVarSizeSequenceOf(p, sAcc, nSize, arrsInnerValues) ::= <<
<p><sAcc>Length := <nSize>;
<arrsInnerValues; separator="\n">
>>

initTestCaseSizeSequenceOf_innerItem(bFirst, bLastItem, nCaseIdx, sChildCaseInit, i, nCaseLen, sResVar) ::= <<
<if(!bLastItem)><if(bFirst)>if<else>elsif<endif> (<i>-1) mod <nCaseLen> = <nCaseIdx>  then<else>else<endif>
    <sChildCaseInit>
>>

initTestCaseSizeSequenceOf(p, sAcc, sArrayHolderName, noMinSize, nSize, bIsFixedSize, arrsInnerItems, bMultiCases, i, sResVar) ::= <<
<i> := 1;
while <i>\<= <nSize> loop
    --  commented because it casues this warning
    --  warning: condition can only be False if invalid values present
    pragma Loop_Invariant (<i> >=1 and <i>\<=<nSize>);
    <arrsInnerItems; separator="\n">
    <if(bMultiCases)>
    end if;

    <endif>
    <i> := <i> + 1;
end loop;
<if(!bIsFixedSize)><p><sAcc>Length := <if(noMinSize)><noMinSize><else><nSize><endif>;<endif>
>>

/*SEQUENCE*/

initSequence_emptySeq(p) ::= <<
<p> := (null record);
>>

initSequence_optionalChild(p, sAcc, sChName, sPresentFlag, sChildContent) ::=<<
<p><sAcc>Exist.<sChName> := <sPresentFlag>;
<sChildContent>
>>

initSequence(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">
>>


initTestCase_sequence_child(p, sAcc, sChName, sChildContent, bOptional, sInitExpr) ::= <<
--set <sChName>
<if(bOptional)><p><sAcc>exist.<sChName> := 1;<endif>
<sChildContent>
>>
initTestCase_sequence_child_opt(p, sAcc, sChName, sChildTypedef, sResVar) ::= <<
<p><sAcc>exist.<sChName> := 0;
>>


initChoice(p, sAcc, sChildContent, sChildID, sChildName, sChildTypeName, sChoiceTypeName, sChildTempVarName, sChildTempDefaultInit, bComponentTempInit) ::= <<
<if(bComponentTempInit)>
declare
   <sChildTempVarName> : <sChildTypeName>;
begin
    <sChildContent>
    <p> := <sChoiceTypeName>'(kind => <sChildID>, <sChildName> => <sChildTempVarName>);
    pragma Annotate (GNATprove, False_Positive,"discriminant check might fail", "reviewed by GM");
end;

<else>
<p> := <sChoiceTypeName>'(kind => <sChildID>, <sChildName> => \<\>);
<sChildContent>

<endif>
>>

initTestCase_choice_child(p, sAcc, sChildContent, sChildID, sChildName, sChildTypeName, sChoiceTypeName, sChildTempVarName, sChildTempDefaultInit, bIsOptional, sResVar) ::= <<
<p> := <sChoiceTypeName>'(kind => <sChildID>, <sChildName> => \<\>);
<sChildContent>
>>



initChildWithInitFunc(p, sChildInitFuncName) ::= <<
<sChildInitFuncName> (<p>);
>>


initBitStringAtPos(sVarName, sStar, sFuncName, sTypeDefName, sNamedBit, nZeroBasedByteIndex, sHexByteMax, nZeroBasedBitIndex) ::= <<
procedure <sFuncName>_set_<sNamedBit>(<sVarName> : in out <sTypeDefName>) --  COVERAGE_IGNORE
is
begin
    <sVarName>.Data(<sVarName>.Data'First + <nZeroBasedBitIndex>) := 1; --  COVERAGE_IGNORE
end <sFuncName>_set_<sNamedBit>;   --  COVERAGE_IGNORE
>>

initBitStringAtPos_def(sVarName, sStar, sFuncName, sTypeDefName, sNamedBit) ::= <<
procedure <sFuncName>_set_<sNamedBit>(<sVarName> : in out <sTypeDefName>);
>>



initFixSizeOctetString(sTypeDefName, nMax, bZeroSizedArray) ::= "(Data => (others => 0))"
initVarSizeOctetString(sTypeDefName, nMin, nMax) ::= "(Length => <nMin>, Data => (others => 0))"

initFixSizeBitString(sTypeDefName, nMax, nMaxOctets) ::= "(Data => (others => 0))"
initVarSizeBitString(sTypeDefName, nMin, nMax, nMaxOctets) ::= "(Length => <nMin>, Data => (others => 0))"

initObjectIdentifierAsExpr() ::= <<
(length => 0, values => (others => 0))
>>

initFixSizeSequenceOfExpr(sTypeDefName, nMax, sChildExp) ::= "(Data => (others => <sChildExp>))"
initVarSizeSequenceOfExpr(sTypeDefName, nMin, nMax, sChildExp) ::= "(Length => <nMin>, Data => (others => <sChildExp>))"


initTypeConstant_def(sTypeDecl, sConstantName, sValue) ::= <<
function <sConstantName>  return <sTypeDecl> is
(<sValue>);
>>

initTypeConstant_body(sTypeDecl, sConstantName, sValue) ::= ""

init_Asn1LocalTimeExpr() ::= <<
(hours => 0,mins => 0,sec => 0,fraction => 0)
>>

init_Asn1UtcTimeExpr() ::= <<
(hours => 0,mins => 0,sec => 0, fraction => 0)
>>


init_Asn1LocalTimeWithTimeZoneExpr() ::= <<
(hours => 0,mins => 0,sec => 0,fraction => 0, tz.sign => 0, tz.hours => 0, tz.mins => 0)
>>

init_Asn1DateExpr() ::= <<
(years => 0, months => 0, days => 0)
>>

init_Asn1Date_LocalTimeExpr() ::= <<
(years => 0, months => 0, days => 0, hours => 0,mins => 0,sec => 0,fraction => 0)
>>

init_Asn1Date_UtcTimeExpr() ::= <<
(years => 0, months => 0, days => 0, hours => 0,mins => 0,sec => 0,fraction => 0)
>>

init_Asn1Date_LocalTimeWithTimeZoneExpr() ::= <<
(years => 0, months => 0, days => 0, hours => 0,mins => 0,sec => 0,fraction => 0)
>>


initSequenceChildExpr(sChildName, sChildExpr, bIsOptional, bIsAbsent) ::= "<sChildName> => <sChildExpr>"
initSequenceOptionalChildExpr(sChildName, nPresenceBit) ::= "<sChildName> => <nPresenceBit>"
initSequenceExpr(sTypeDefName, arrsChildren, arrsOptionalChildren) ::= <<
(<arrsChildren; separator=", "><if (arrsOptionalChildren)>, Exist => (<arrsOptionalChildren; separator=", ">)<endif>)
>>

initChoiceExpr(sChildName, sChildKind, sChildExpr) ::= "(kind => <sChildKind>, <sChildName> => <sChildExpr>)"
