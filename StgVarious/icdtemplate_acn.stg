/*
* Copyright (c) 2008-2012 Semantix and (c) 2012-2015 Neuropublic
*
* This file is part of the ASN1SCC tool.
*
* Licensed under the terms of GNU General Public Licence as published by
* the Free Software Foundation.
*
*  For more informations see License.txt file
*/



group icd_acn;

//delimiters "$", "$"

NewLine() ::= "<br/>"
OddRow() ::= "OddRow"
EvenRow() ::= "EvenRow"


Integer()       ::= "INTEGER"
BitString()     ::= "BIT-STRING"
OctetString()   ::= "OCTET-STRING"
Boolean()       ::= "BOOLEAN"
Choice()        ::= "CHOICE"
Enumerated()    ::= "ENUMERATED"
IA5String()     ::= "IA5String"
NumericString() ::= "NumericString"
NullType() ::= "NULL"
NullTypeWithBitPattern(sPattern) ::= "fixed pattern: '$sPattern$'B"
NullTypeWithBytePattern(arruOctets) ::= "fixed pattern:  '$arruOctets:{b|$b;format=\"X2\"$}$'H"


Real()          ::= "REAL"
Sequence()      ::= "SEQUENCE"
SequenceOf()    ::= "SEQUENCE-OF"
ObjectIdentifier()       ::= "OBJECT IDENTIFIER"
RelativeOid()       ::= "RELATIVE-OID"


EmitRowWith3Dots() ::= <<
<tr class="CommentRow">
<td class="threeDots" colspan="8"> <p>. . .</p> </td>
</tr>
>>

EmmitFilePart2(sFileName, sAsn1Content) ::= <<
<div style="width: 100%">
<h1 >File : $sFileName$</h1>
<div style="width: 100%; white-space:pre; font-family:Courier New; font-size:small">
$sAsn1Content$
</div>
</div>
>>


EmitModule(sModName, sAsn1FileName, soAcnFileName, arrsComments, arrsTases) ::= <<
<div style="width: 100%">
<h1>Module $sModName$</h1>
$if(soAcnFileName)$
<i>Defined in: $sAsn1FileName$, $soAcnFileName$.</i>
$else$
<i>Defined in: $sAsn1FileName$.</i>
$endif$
<p>
$arrsComments;separator="\n<br/>\n"$
</p>
$arrsTases;separator="\n"$
</div>
>>


EmmitTass(sTypeContent) ::= <<
$sTypeContent$
&nbsp;<br/>
>>


ItemNumber(nIndex) ::= "Item #$nIndex$"

// HTML formatting for the ACN grammar (new in version 3.2.x)

// Lower/greater than symbols (< and >) must be replaced with HTML code
LeftDiple() ::= "&lt;"
RightDiple() ::= "&gt;"

AcnKeyword(sKeyword) ::= <<
<b><font color="#5F9EA0">$sKeyword$</font></b>
>>

StringLiteral(sStringLiteral) ::= <<
<font color="#A31515">$sStringLiteral$</font>
>>

TasName(sTasName, sTasNameC) ::= <<
<a name="ACN_$sTasNameC$"></a><a href="#ICD_$sTasNameC$"><font color="#B8860B"><b>$sTasName$</b></font></a>
>>

TasName2(sTasName, sTasNameC) ::= <<
<a href="#ASN1_$sTasNameC$"><font color="#000000">$sTasName$</font></a>
>>

BlueTas(sBlueTasC,sTasName) ::= <<
<a name="ASN1_$sBlueTasC$">$sTasName$</a>
>>

Asn1Token(sKeyword) ::= <<
<b><font color="#5F9EA0">$sKeyword$</font></b>
>>


Comment(sComment) ::= <<
<font color="#008000"><i>$sComment$</i></font>
>>

// End HTML formatting for the ACN grammar

EmitEnumItem(sName, nValue) ::= <<
<li><font class="enumeration_name">$sName$</font> ($nValue$)</li>
>>

EmitEnumItemWithComment(sName, nValue, sComment) ::= <<
<li><font class="enumeration_name">$sName$</font> ($nValue$) - $sComment$</li>
>>

EmitEnumInternalContents(arrsItems) ::= <<
Possible values:<br/>
<ul class="enumeration">
$arrsItems;separator="\n"$
</ul>
>>


EmitSequenceOrChoice(bIsAnonymousType, sTasName, sTasNameC, bHasAcnDef, sAsn1Kinf, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, arrsChildren, arrsParams, arrsComments) ::= <<
<a name="ICD_$sTasNameC$"></a> 
<table width="100%" >
<tbody>

<tr class="typeRow">
<td colspan="7">
$sTasName$ <font size="-1">($if(bIsAnonymousType)$<i>anonymous </i>$endif$$sAsn1Kinf$)</font>
<font size="-2"><a href="#ASN1_$sTasNameC$" class="fileLink">ASN.1</a>$if(bHasAcnDef)$  <a href="#ACN_$sTasNameC$" class="fileLink">ACN</a>$endif$</font>
</td>

<td align="left">
    <font size="-1">Min:&nbsp;$sMinBytes$&nbsp;bytes</font>
</td>

<td align="left">
    <font size="-1">Max:&nbsp;$sMaxBytes$&nbsp;bytes$sMaxBitsExplained$</font>
</td>
</tr>

$if(sCommentLine)$
<tr class="CommentRow">
<td class="comment2" colspan="9">$sCommentLine$</td>
</tr>
$endif$



$if(arrsParams)$
<tr class="headerRow">
<td class="hrNo">No</td>
<td class="hrField" colspan="4">ACN Parameters <a href="#ACN_PARAMS_EXPLAINED123" class="acnParamsLink">[?]</a></td>
<td class="hrType" colspan="4">Type</td>
</tr>
$arrsParams$
$endif$

<tr class="headerRow">
<td class="hrNo">No</td>
<td class="hrField">Field</td>
<td class="hrComment">Comment</td>
<td class="hrOptional">Present</td>
<td class="hrType">Type</td>
<td class="hrConstraint">Constraint</td>
<td class="hrMin">Min Bits</td>
<td class="hrMax">Max Bits</td>
<td class="hrMax">Unit</td>
</tr>

$arrsChildren;separator="\n"$

</tbody>
</table>
>>


EmmitSeqOrChoiceRow(sCssClass, nIndex, sName, sComment, sPresentWhen, sType, sConstraint, sMin, sMax, noAlignToNextSize, soUnit) ::= <<
$if(noAlignToNextSize)$
<tr class="$sCssClass$">
<td class="no"></td>
<td class="field">padding field</td>
<td class="comment">present due to align-to-next property</td>
<td class="optional"></td>
<td class="type">padding bits</td>
<td class="constraint"></td>
<td class="min">0</td>
<td class="max">$noAlignToNextSize$</td>
<td class="max">$soUnit$</td>
</tr>

$endif$
<tr class="$sCssClass$">
<td class="no">$nIndex$</td>
<td class="field">$sName$</td>
<td class="comment">$sComment$</td>
<td class="optional">$sPresentWhen$</td>
<td class="type">$sType$</td>
<td class="constraint">$sConstraint$</td>
<td class="min">$sMin$</td>
<td class="max">$sMax$</td>
<td class="max">$soUnit$</td>
</tr>
>>

EmmitSequencePreambleSingleComment(nIndex, sOptChildName) ::= <<
<li>bit$nIndex$ == 1 &#8658 <font  color="#5F9EA0" >$sOptChildName$</font> is present</li>
>>


EmmitSequencePreambleComment(arrsOptWihtNoPresentWhenChildren) ::= <<
Special field used by ACN to indicate the presence/absence of optional fields that do not have the present when property.
$if(arrsOptWihtNoPresentWhenChildren)$
<br/>
<ul type="square">
$arrsOptWihtNoPresentWhenChildren;separator="\n"$
</ul>
$endif$
>>

EmmitChoiceIndexComment() ::= <<
Special field used by ACN to indicate which choice alternative is present.
>>

EmmitChoiceChild(sCssClass, nIndex, sName, sComment,  sType, sConstraint, sMin, sMax) ::= <<
<tr class="$sCssClass$">
<td class="no">$nIndex$</td>
<td class="field">$sName$</td>
<td class="comment">$sComment$</td>
<td class="optional">always</td>
<td class="type">$sType$</td>
<td class="constraint">$sConstraint$</td>
<td class="min">$sMin$</td>
<td class="max">$sMax$</td>
</tr>
>>

EmmitSeqChild_RefType(sRefName, soRefNameC) ::= <<
$if(soRefNameC)$<a href="#ICD_$soRefNameC$">$sRefName$</a>$else$$sRefName$$endif$
>>



EmitPrimitiveType(bIsAnonymousType, sTasName, sTasNameC, bHasAcnDef, sAsnKindName, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, sAsn1Constraints, sMinBits, sMaxBits, arrsParams, arrsComments, soUnit) ::= <<
<a name="ICD_$sTasNameC$"></a> 
<table width="100%" >
<tbody>

<tr class="typeRow">
<td colspan="2"  >
$sTasName$ <font size="-1">($if(bIsAnonymousType)$<i>anonymous </i>$endif$$sAsnKindName$)</font>
<font size="-2"><a href="#ASN1_$sTasNameC$" class="fileLink">ASN.1</a>  $if(bHasAcnDef)$<a href="#ACN_$sTasNameC$" class="fileLink">ACN</a>$endif$ </font>
</td>

<td align="left">
    <font size="-1">Min:&nbsp;$sMinBytes$&nbsp;bytes</font>
</td>

<td align="left">
    <font size="-1">Max:&nbsp;$sMaxBytes$&nbsp;bytes$sMaxBitsExplained$</font>
</td>
<td align="left">
    <font size="-1"></font>
</td>
</tr>

$if(sCommentLine)$
<tr class="CommentRow">
<td class="comment2" colspan="5">$sCommentLine$</td>
</tr>

$endif$

$if(arrsParams)$
<tr class="headerRow">
<td class="hrNo" colspan="1">No</td>
<td class="hrField" colspan="2">ACN Parameters <a href="#ACN_PARAMS_EXPLAINED123" class="acnParamsLink">[?]</a></td>
<td class="hrType">Type</td>
</tr>
$arrsParams$
$endif$

<tr class="headerRow">
<td class="hrConstraint2" colspan="2">Constraints</td>
<td class="hrMin">Min Length (bits)</td>
<td class="hrMax">Max Length (bits)</td>
<td class="hrMax">Unit</td>
</tr>

<tr class="OddRow">
    <td class="constraint" colspan="2">$sAsn1Constraints$</td>
    <td class="min" >$sMinBits$</td>
    <td class="max" >$sMaxBits$$sMaxBitsExplained$</td>
    <td class="max" >$soUnit$</td>
</tr>

</tbody>
</table>
>>


EmitSizeable(bIsAnonymousType, sTasName, sTasNameC, bHasAcnDef, sKind, sMinBytes, sMaxBytes, sMaxBitsExplained, sCommentLine, arrsRows, arrsParams, arrsComments) ::= <<
<a name="ICD_$sTasNameC$"></a>
<table width="100%" >
<tbody>

<tr  class="typeRow">
<td colspan="6">
$sTasName$ <font size="-1">($if(bIsAnonymousType)$<i>anonymous </i>$endif$$sKind$)</font>
<font size="-2"><a href="#ASN1_$sTasNameC$" class="fileLink">ASN.1</a>$if(bHasAcnDef)$  <a href="#ACN_$sTasNameC$" class="fileLink">ACN</a>$endif$</font>
</td>

<td align="left">
    <font size="-1">Min:&nbsp;$sMinBytes$&nbsp;bytes</font>
</td>

<td align="left">
    <font size="-1">Max:&nbsp;$sMaxBytes$&nbsp;bytes$sMaxBitsExplained$</font>
</td>
</tr>

$if(sCommentLine)$
<tr class="CommentRow">
<td class="comment2" colspan="8">$sCommentLine$</td>
</tr>
$endif$

$if(arrsParams)$
<tr class="headerRow">
<td class="hrNo" colspan="1">No</td>
<td class="hrField" colspan="2">ACN Parameters <a href="#ACN_PARAMS_EXPLAINED123" class="acnParamsLink">[?]</a></td>
<td class="hrType" colspan="4">Type</td>
</tr>
$arrsParams$
$endif$


<tr class="headerRow">
<td class="hrNo">No</td>
<td class="hrField">Field</td>
<td class="hrComment">Comment</td>
<td class="hrOptional">Present</td>
<td class="hrType">Type</td>
<td class="hrConstraint">Constraint</td>
<td class="hrMin">Min Length (bits)</td>
<td class="hrMax">Max Length (bits)</td>
</tr>

$arrsRows;separator="\n"$

</tbody>
</table>
>>

PrintParam(nIndex, sName, sType, nColSpan) ::= <<
<tr class="OddRow">
    <td class="no" >$nIndex$</td>
    <td class="field" colspan="$nColSpan$">$sName$</td>
    <td class="type" colspan="4">$sType$</td>
</tr>
>>

RootCss() ::= <<
table
{
    border: 2px solid black;
    border-collapse: collapse;
    font-family: Arial, Helvetica, sans-serif;
    max-width: 60em;
}

table td
{
    border-left: 1px solid gray;
    border-top: 1px solid gray;
    padding-top: 2pt;
    padding-bottom: 2pt;
    padding-left: 3pt;
    padding-right: 3pt;
}

table td:first-child
{
    border-left: none;
}

.headerRow
{
    background-color: #BBBBBB;
}

.typeRow
{
    font-size: 14pt;
    color: white;
    background-color: gray;
    white-space: nowrap;
}

.hrNo
{
    text-align: center;
    color: white;
    font-size: 10pt;
    width: 1%;
}

.hrField
{
    text-align: left;
    color: white;
    font-size: 10pt;
    width: 15%;
}

.hrComment
{
    text-align: left;
    color: white;
    font-size: 10pt;
    width: 20%;
}

.hrType
{
    text-align: left;
    color: white;
    font-size: 10pt;
    width: 20%;
}

.hrConstraint
{
    text-align: left;
    color: white;
    font-size: 10pt;
    white-space: nowrap;
    width: 1%;
}

.hrConstraint2
{
    text-align: left;
    color: white;
    font-size: 10pt;
}

.hrOptional
{
    text-align: left;
    color: white;
    font-size: 10pt;
    white-space: nowrap;
    width: 1%;
}

.hrMin
{
    text-align: left;
    color: white;
    font-size: 10pt;
    white-space: nowrap;
    width: 1%;
}

.hrMax
{
    text-align: left;
    color: white;
    font-size: 10pt;
    white-space: nowrap;
    width: 1%;
}

.CommentRow
{
    background-color: #e9e9e9;
    height: 18pt;
}

.OddRow
{
    background-color: #e9e9e9;
    height: 18pt;
}

.EvenRow
{
    background-color: #DBDBDB;
    height: 18pt;
}

.no
{
    text-align:  center;
    color: black;
    font-size: 9pt;
}

.field
{
    text-align: left;
    color: black;
    font-size: 9pt;
}

.comment
{
    color: black;
    font-size: 9pt;
    text-align: left;
}

.comment2
{
    color: black;
    font-size: 9pt;
    text-align: left;
}

.threeDots
{
    color: black;
    font-size: 9pt;
    text-align:center;
}

.type
{
    text-align: left;
    color: black;
    font-size: 9pt;
}

.constraint
{
    text-align: left;
    color: black;
    white-space: nowrap;
    font-size: 9pt;
}

.optional
{
    text-align: left;
    color: black;
    font-size: 9pt;
    white-space: nowrap;
}

.min
{
    text-align: right;
    color: black;
    font-size: 9pt;
}

.max
{
    text-align: right;
    color: black;
    font-size: 9pt;
}

h1
{
    font-family: Verdana, Sans-Serif;
    color: black;
    font-size: 14pt;
}

h2
{
    font-family: Verdana, Sans-Serif;
    color: black;
    font-size: 12pt;
}

a
{
    color: black;
}

a.fileLink
{
    color: white;
}

a.acnParamsLink
{
    color: white;
    text-decoration: none;
    vertical-align: super;
    font-size: 8pt;
}

ul.enumeration
{
    list-style-type: square;
    margin-top: 0pt;
    margin-bottom: 1pt;
    padding-left: 20pt;
}

font.enumeration_name
{
    font-style: italic;
}

#toc_container {
    background: #ffffff none repeat scroll 0 0;
    border: 0px solid #aaa;
    display: table;
    font-size: 95%;
    margin-bottom: 1em;
    padding: 20px;
    width: auto;
}

.toc_title {
    font-weight: 700;
    text-align: center;
}

#toc_container li, #toc_container ul, #toc_container ul li{
    list-style: outside none none !important;
}

>>


ToC_Module_tas(sTitle, sHref) ::= <<
    <li><a href="#$sHref$">$sTitle$</a></li>
>>

ToC_Module(sTitle, sHref, arrsTasses) ::= <<
<li><a href="#$sHref$">$sTitle$</a>
    <ul>
        $arrsTasses;separator="\n"$
    </ul>
</li>
>>

ToC(arrsModules) ::= <<
<div id="toc_container">
    <p class="toc_title">Contents</p>
    <ul class="toc_list">
        $arrsModules;separator="\n"$
    </ul>
</div>
>>

RootHtml(sToC, arrsFiles1, arrsFiles2, bAcnParamsMustBeExplained, arrsFiles3, sCssFileName) ::= <<
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>ICD</title>
    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
    <link rel="stylesheet" href="$sCssFileName$" /> 
</head>
<body>
<em>The following tables describe the binary encodings of the data model using the ACN Encoding Rules.
</em><br/><br/>
$sToC$
<br/>
  $arrsFiles1;separator="\n"$

  <hr />
$if(bAcnParamsMustBeExplained)$
    <a name="ACN_PARAMS_EXPLAINED123"></a>
    <em>ACN Parameters</em><br/>
    In the standard ASN.1 encodings such as uPER, BER etc, the encoding and decoding of any type has no external dependencies. For example, the encoded data for a SEQUENCE OF depends on the number of items in the SEQUENCE OF (the length determinant) and the type of item contained in the SEQUENCE. On the other hand, ACN allows types to be parameterized. For instance, the length of a SEQUENCE OF may be determined by the value of an external field. In this case, the SEQUENCE OF is parameterized and the input parameter is the field providing the length.
  <hr />
    <br/>
$endif$

  $arrsFiles2;separator="\n"$

  $arrsFiles3;separator="\n"$

</body>
</html>
>>
